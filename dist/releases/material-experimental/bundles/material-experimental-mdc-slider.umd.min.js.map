{"version":3,"file":"material-experimental-mdc-slider.umd.min.js","sources":["../../src/material-experimental/mdc-slider/slider.ts","../../src/material-experimental/mdc-slider/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {normalizePassiveListenerOptions, Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCSliderAdapter, MDCSliderFoundation} from '@material/slider';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/**\n * Size of a tick marker for a slider. The size of a tick is based on the Material\n * Design guidelines and the MDC slider implementation.\n * TODO(devversion): ideally MDC would expose the tick marker size as constant\n */\nconst TICK_MARKER_SIZE = 2;\n\n/** Options to pass to the slider interaction listeners. */\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  host: {\n    'class': 'mat-mdc-slider mdc-slider',\n    'role': 'slider',\n    'aria-orientation': 'horizontal',\n    // The tabindex if the slider turns disabled is managed by the MDC foundation which\n    // dynamically updates and restores the \"tabindex\" attribute.\n    '[attr.tabindex]': 'tabIndex || 0',\n    '[class.mdc-slider--discrete]': 'thumbLabel',\n    '[class.mat-slider-has-ticks]': 'tickInterval !== 0',\n    '[class.mdc-slider--display-markers]': 'tickInterval !== 0',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(blur)': '_markAsTouched()',\n  },\n  exportAs: 'matSlider',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n})\nexport class MatSlider implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Tabindex for the slider. */\n  @Input() tabIndex: number = 0;\n\n  /** The color palette for this slider. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number {\n    return this._min;\n  }\n  set min(value: number) {\n    this._min = coerceNumberProperty(value);\n  }\n  private _min = 0;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n  set max(value: number) {\n    this._max = coerceNumberProperty(value);\n  }\n  private _max = 100;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number|null {\n    // If the value needs to be read and it is still uninitialized, initialize\n    // it to the current minimum value.\n    if (this._value === null) {\n      this.value = this.min;\n    }\n    return this._value;\n  }\n  set value(value: number|null) {\n    this._value = coerceNumberProperty(value);\n  }\n  private _value: number|null = null;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number {\n    return this._step;\n  }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n  }\n  private _step: number = 1;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() {\n    return this._tickInterval;\n  }\n  set tickInterval(value: number|'auto') {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: number|'auto' = 0;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean {\n    return this._thumbLabel;\n  }\n  set thumbLabel(value: boolean) {\n    this._thumbLabel = coerceBooleanProperty(value);\n  }\n  private _thumbLabel: boolean = false;\n\n  /** Whether the slider is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Adapter for the MDC slider foundation. */\n  private _sliderAdapter: MDCSliderAdapter = {\n    hasClass: (className) => this._elementRef.nativeElement.classList.contains(className),\n    addClass: (className) => this._elementRef.nativeElement.classList.add(className),\n    removeClass: (className) => this._elementRef.nativeElement.classList.remove(className),\n    getAttribute: (name) => this._elementRef.nativeElement.getAttribute(name),\n    setAttribute: (name, value) => this._elementRef.nativeElement.setAttribute(name, value),\n    removeAttribute: (name) => this._elementRef.nativeElement.removeAttribute(name),\n    computeBoundingRect: () => this._elementRef.nativeElement.getBoundingClientRect(),\n    getTabIndex: () => this._elementRef.nativeElement.tabIndex,\n    registerInteractionHandler: (evtType, handler) =>\n        // Interaction event handlers (which handle keyboard interaction) cannot be passive\n        // as they will prevent the default behavior. Additionally we can't run these event\n        // handlers outside of the Angular zone because we rely on the events to cause the\n        // component tree to be re-checked.\n    this._elementRef.nativeElement.addEventListener(evtType, handler),\n    deregisterInteractionHandler: (evtType, handler) =>\n        this._elementRef.nativeElement.removeEventListener(evtType, handler),\n    registerThumbContainerInteractionHandler:\n        (evtType, handler) => {\n          // The thumb container interaction handlers are currently just used for transition\n          // events which don't need to run in the Angular zone.\n          this._ngZone.runOutsideAngular(() => {\n            this._thumbContainer.nativeElement.addEventListener(evtType, handler, listenerOptions);\n          });\n        },\n    deregisterThumbContainerInteractionHandler:\n        (evtType, handler) => {\n          this._thumbContainer.nativeElement.removeEventListener(evtType, handler, listenerOptions);\n        },\n    registerBodyInteractionHandler: (evtType, handler) =>\n        // Body event handlers (which handle thumb sliding) cannot be passive as they will\n        // prevent the default behavior. Additionally we can't run these event handlers\n        // outside of the Angular zone because we rely on the events to cause the component\n        // tree to be re-checked.\n    document.body.addEventListener(evtType, handler),\n    deregisterBodyInteractionHandler: (evtType, handler) =>\n        document.body.removeEventListener(evtType, handler),\n    registerResizeHandler:\n        (handler) => {\n          // The resize handler is currently responsible for detecting slider dimension\n          // changes and therefore doesn't cause a value change that needs to be propagated.\n          this._ngZone.runOutsideAngular(() => {\n            window.addEventListener('resize', handler, listenerOptions);\n          });\n        },\n    deregisterResizeHandler: (handler) =>\n        window.removeEventListener('resize', handler, listenerOptions),\n    notifyInput:\n        () => {\n          const newValue = this._foundation.getValue();\n          // MDC currently fires the input event multiple times.\n          // TODO(devversion): remove this check once the input notifications are fixed.\n          if (newValue !== this.value) {\n            this.value = newValue;\n            this.input.emit(this._createChangeEvent(newValue));\n          }\n        },\n    notifyChange:\n        () => {\n          // TODO(devversion): bug in MDC where only the \"change\" event is emitted if a keypress\n          // updated the value. Material and native range sliders also emit an input event.\n          // Usually we sync the \"value\" in the \"input\" event, but as a workaround we now sync\n          // the value in the \"change\" event.\n          this.value = this._foundation.getValue();\n          this._emitChangeEvent(this.value!);\n        },\n    setThumbContainerStyleProperty:\n        (propertyName, value) => {\n          this._thumbContainer.nativeElement.style.setProperty(propertyName, value);\n        },\n    setTrackStyleProperty:\n        (propertyName, value) => {\n          this._track.nativeElement.style.setProperty(propertyName, value);\n        },\n    setMarkerValue:\n        () => {\n          // Mark the component for check as the thumb label needs to be re-rendered.\n          this._changeDetectorRef.markForCheck();\n        },\n    setTrackMarkers:\n        (step, max, min) => {\n          this._trackMarker.nativeElement.style.setProperty(\n              'background', this._getTrackMarkersBackground(min, max, step));\n        },\n    isRTL: () => this._dir && this._dir.value === 'rtl',\n  };\n\n  /** Instance of the MDC slider foundation for this slider. */\n  private _foundation = new MDCSliderFoundation(this._sliderAdapter);\n\n  /** Whether the MDC foundation has been initialized. */\n  private _isInitialized = false;\n\n  /** Function that notifies the control value accessor about a value change. */\n  private _controlValueAccessorChangeFn: (value: number) => void = () => {};\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Function that marks the slider as touched. Registered via \"registerOnTouch\". */\n  _markAsTouched: () => any = () => {};\n\n  @ViewChild('thumbContainer', {static: false}) _thumbContainer: ElementRef<HTMLElement>;\n  @ViewChild('track', {static: false}) _track: ElementRef<HTMLElement>;\n  @ViewChild('pinValueMarker', {static: false}) _pinValueMarker: ElementRef<HTMLElement>;\n  @ViewChild('trackMarker', {static: false}) _trackMarker: ElementRef<HTMLElement>;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _changeDetectorRef: ChangeDetectorRef,\n      private _ngZone: NgZone,\n      private _platform: Platform,\n      @Optional() private _dir: Directionality,\n      @Attribute('tabindex') tabIndex: string,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        // In case the directionality changes, we need to refresh the rendered MDC slider.\n        // Note that we need to wait until the page actually updated as otherwise the\n        // client rectangle wouldn't reflect the new directionality.\n        // TODO(devversion): ideally the MDC slider would just compute dimensions similarly\n        // to the standard Material slider on \"mouseenter\".\n        this._ngZone.runOutsideAngular(() => setTimeout(() => this._foundation.layout()));\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    this._isInitialized = true;\n\n    if (this._platform.isBrowser) {\n      // The MDC slider foundation accesses DOM globals, so we cannot initialize the\n      // foundation on the server. The foundation would be needed to move the thumb\n      // to the proper position and to render the ticks.\n      this._foundation.init();\n\n      // The standard Angular Material slider is always using discrete values. We always\n      // want to enable discrete values and support ticks, but want to still provide\n      // non-discrete slider visual looks if thumb label is disabled.\n      // TODO(devversion): check if we can get a public API for this.\n      // Tracked with: https://github.com/material-components/material-components-web/issues/5020\n      (this._foundation as any).isDiscrete_ = true;\n\n      // These bindings cannot be synced in the foundation, as the foundation is not\n      // initialized and they cause DOM globals to be accessed (to move the thumb)\n      this._syncStep();\n      this._syncValue();\n      this._syncMax();\n      this._syncMin();\n    }\n\n    this._syncDisabled();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    if (changes['step']) {\n      this._syncStep();\n    }\n    if (changes['max']) {\n      this._syncMax();\n    }\n    if (changes['min']) {\n      this._syncMin();\n    }\n    if (changes['disabled']) {\n      this._syncDisabled();\n    }\n    if (changes['value']) {\n      this._syncValue();\n    }\n    if (changes['tickInterval']) {\n      this._refreshTrackMarkers();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    // The foundation cannot be destroyed on the server, as the foundation\n    // has not be initialized on the server.\n    if (this._platform.isBrowser) {\n      this._foundation.destroy();\n    }\n  }\n\n  /** Focuses the slider. */\n  focus(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the slider. */\n  blur() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /** Gets the display text of the current value. */\n  get displayValue() {\n    if (this.displayWith) {\n      return this.displayWith(this.value!).toString();\n    }\n    return this.value!.toString() || '0';\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(newValue: number): MatSliderChange {\n    const event = new MatSliderChange();\n    event.source = this;\n    event.value = newValue;\n    return event;\n  }\n\n  /** Emits a change event and notifies the control value accessor. */\n  private _emitChangeEvent(newValue: number) {\n    this._controlValueAccessorChangeFn(newValue);\n    this.valueChange.emit(newValue);\n    this.change.emit(this._createChangeEvent(newValue));\n  }\n\n  /** Computes the CSS background value for the track markers (aka ticks). */\n  private _getTrackMarkersBackground(min: number, max: number, step: number) {\n    if (!this.tickInterval) {\n      return '';\n    }\n\n    const markerWidth = `${TICK_MARKER_SIZE}px`;\n    const markerBackground =\n        `linear-gradient(to right, currentColor ${markerWidth}, transparent 0)`;\n\n    if (this.tickInterval === 'auto') {\n      const trackSize = this._elementRef.nativeElement.getBoundingClientRect().width;\n      const pixelsPerStep = trackSize * step / (max - min);\n      const stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      const pixelsPerTick = stepsPerTick * step;\n      return `${markerBackground} 0 center / ${pixelsPerTick}px 100% repeat-x`;\n    }\n\n    // keep calculation in css for better rounding/subpixel behavior\n    const markerAmount = `(((${max} - ${min}) / ${step}) / ${this.tickInterval})`;\n    const markerBkgdLayout =\n        `0 center / calc((100% - ${markerWidth}) / ${markerAmount}) 100% repeat-x`;\n    return `${markerBackground} ${markerBkgdLayout}`;\n  }\n\n  /** Method that ensures that track markers are refreshed. */\n  private _refreshTrackMarkers() {\n    // MDC only checks whether the slider has markers once on init by looking for the\n    // `mdc-slider--display-markers` class in the DOM, whereas we support changing and hiding\n    // the markers dynamically. This is a workaround until we can get a public API for it. See:\n    // https://github.com/material-components/material-components-web/issues/5020\n    (this._foundation as any).hasTrackMarker_ = this.tickInterval !== 0;\n    this._foundation.setupTrackMarker();\n  }\n\n  /** Syncs the \"step\" input value with the MDC foundation. */\n  private _syncStep() {\n    this._foundation.setStep(this.step);\n  }\n\n  /** Syncs the \"max\" input value with the MDC foundation. */\n  private _syncMax() {\n    this._foundation.setMax(this.max);\n  }\n\n  /** Syncs the \"min\" input value with the MDC foundation. */\n  private _syncMin() {\n    this._foundation.setMin(this.min);\n  }\n\n  /** Syncs the \"value\" input binding with the MDC foundation. */\n  private _syncValue() {\n    this._foundation.setValue(this.value!);\n  }\n\n  /** Syncs the \"disabled\" input value with the MDC foundation. */\n  private _syncDisabled() {\n    this._foundation.setDisabled(this.disabled);\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: any) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this._markAsTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._syncDisabled();\n  }\n\n  /**\n   * Sets the model value.\n   * Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._syncValue();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSlider} from './slider';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n})\nexport class MatSliderModule {\n}\n"],"names":["listenerOptions","normalizePassiveListenerOptions","passive","MAT_SLIDER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatSlider","multi","MatSliderChange","_elementRef","_changeDetectorRef","_ngZone","_platform","_dir","tabIndex","_animationMode","_this","this","change","EventEmitter","input","valueChange","color","_min","_max","_value","_step","_tickInterval","_thumbLabel","_disabled","_sliderAdapter","hasClass","className","nativeElement","classList","contains","addClass","add","removeClass","remove","getAttribute","name","setAttribute","value","removeAttribute","computeBoundingRect","getBoundingClientRect","getTabIndex","registerInteractionHandler","evtType","handler","addEventListener","deregisterInteractionHandler","removeEventListener","registerThumbContainerInteractionHandler","runOutsideAngular","_thumbContainer","deregisterThumbContainerInteractionHandler","registerBodyInteractionHandler","document","body","deregisterBodyInteractionHandler","registerResizeHandler","window","deregisterResizeHandler","notifyInput","newValue","_foundation","getValue","emit","_createChangeEvent","notifyChange","_emitChangeEvent","setThumbContainerStyleProperty","propertyName","style","setProperty","setTrackStyleProperty","_track","setMarkerValue","markForCheck","setTrackMarkers","step","max","min","_trackMarker","_getTrackMarkersBackground","isRTL","MDCSliderFoundation","_isInitialized","_controlValueAccessorChangeFn","_dirChangeSubscription","Subscription","EMPTY","_markAsTouched","parseInt","subscribe","setTimeout","layout","Object","defineProperty","prototype","coerceNumberProperty","v","coerceBooleanProperty","disabled","ngAfterViewInit","isBrowser","init","isDiscrete_","_syncStep","_syncValue","_syncMax","_syncMin","_syncDisabled","ngOnChanges","changes","_refreshTrackMarkers","ngOnDestroy","unsubscribe","destroy","focus","options","blur","displayWith","toString","event","source","tickInterval","markerBackground","trackSize","width","pixelsPerStep","Math","ceil","hasTrackMarker_","setupTrackMarker","setStep","setMax","setMin","setValue","setDisabled","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","type","Component","args","selector","template","styles","host","class","role","aria-orientation","[class.mat-slider-has-ticks]","[class.mdc-slider--display-markers]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class._mat-animation-noopable]","(blur)","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","NgZone","Platform","Directionality","decorators","Optional","String","Attribute","Inject","ANIMATION_MODULE_TYPE","propDecorators","Output","Input","thumbLabel","ViewChild","static","_pinValueMarker","MatSliderModule","NgModule","imports","MatCommonModule","CommonModule","exports","declarations"],"mappings":"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"}