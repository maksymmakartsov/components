{"version":3,"file":"material-experimental-mdc-checkbox.umd.js","sources":["../../src/material-experimental/mdc-checkbox/module.ts","../../src/material-experimental/mdc-checkbox/checkbox.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {_MatCheckboxRequiredValidatorModule} from '@angular/material/checkbox';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, CommonModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from '@angular/material/checkbox';\nimport {ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCCheckboxAdapter, MDCCheckboxFoundation} from '@material/checkbox';\nimport {numbers} from '@material/ripple';\n\nlet nextUniqueId = 0;\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[id]': 'id',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  /**\n   * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** The `aria-labelledby` attribute to use for the input element. */\n  @Input('aria-labelledby') ariaLabelledby: string|null = null;\n\n  /** The color palette  for this checkbox ('primary', 'accent', or 'warn'). */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n  @Input() labelPosition: 'before'|'after' = 'after';\n\n  /** The `name` attribute to use for the input element. */\n  @Input() name: string|null = null;\n\n  /** The `tabindex` attribute to use for the input element. */\n  @Input() tabIndex: number;\n\n  /** The `value` attribute to use for the input element */\n  @Input() value: string;\n\n  private _uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(checked) {\n    this._checked = coerceBooleanProperty(checked);\n  }\n  private _checked = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(indeterminate) {\n    this._indeterminate = coerceBooleanProperty(indeterminate);\n  }\n  private _indeterminate = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(required) {\n    this._required = coerceBooleanProperty(required);\n  }\n  private _required = false;\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output()\n  readonly change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The root element for the `MDCCheckbox`. */\n  @ViewChild('checkbox', {static: false}) _checkbox: ElementRef<HTMLElement>;\n\n  /** The native input element. */\n  @ViewChild('nativeCheckbox', {static: false}) _nativeCheckbox: ElementRef<HTMLInputElement>;\n\n  /** The native label element. */\n  @ViewChild('label', {static: false}) _label: ElementRef<HTMLElement>;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** The `MDCCheckboxFoundation` instance for this checkbox. */\n  _checkboxFoundation: MDCCheckboxFoundation;\n\n  /** The set of classes that should be applied to the native input. */\n  _classes: {[key: string]: boolean} = {'mdc-checkbox__native-control': true};\n\n  /** Animation config for the ripple. */\n  _rippleAnimation = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS,\n  };\n\n  /** ControlValueAccessor onChange */\n  private _cvaOnChange = (_: boolean) => {};\n\n  /** ControlValueAccessor onTouch */\n  private _cvaOnTouch = () => {};\n\n  /**\n   * A list of attributes that should not be modified by `MDCFoundation` classes.\n   *\n   * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n   * Therefore we disable it and handle it ourselves.\n   */\n  private _attrBlacklist = new Set(['aria-checked']);\n\n  /** The `MDCCheckboxAdapter` instance for this checkbox. */\n  private _checkboxAdapter: MDCCheckboxAdapter = {\n    addClass: (className) => this._setClass(className, true),\n    removeClass: (className) => this._setClass(className, false),\n    forceLayout: () => this._platform.isBrowser && this._checkbox.nativeElement.offsetWidth,\n    hasNativeControl: () => !!this._nativeCheckbox,\n    isAttachedToDOM: () => !!this._checkbox.nativeElement.parentNode,\n    isChecked: () => this.checked,\n    isIndeterminate: () => this.indeterminate,\n    removeNativeControlAttr:\n        (attr) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.removeAttribute(attr);\n          }\n        },\n    setNativeControlAttr:\n        (attr, value) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n          }\n        },\n    setNativeControlDisabled: (disabled) => this.disabled = disabled,\n  };\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      private _platform: Platform,\n      @Attribute('tabindex') tabIndex: string,\n      @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION) private _clickAction: MatCheckboxClickAction,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._checkboxFoundation = new MDCCheckboxFoundation(this._checkboxAdapter);\n    // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n    // ripple, which we do ourselves instead.\n  }\n\n  ngAfterViewInit() {\n    this._checkboxFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this._checkboxFoundation.destroy();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnChange(fn: (checked: boolean) => void) {\n    this._cvaOnChange = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void) {\n    this._cvaOnTouch = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._nativeCheckbox.nativeElement.focus();\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle() {\n    this.checked = !this.checked;\n    this._cvaOnChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._cvaOnTouch();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Handles click events on the native input.\n   *\n   * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n   * not actually change the checked state when the user clicks an indeterminate checkbox. By\n   * listening to `click` instead we can override and normalize the behavior to change the checked\n   * state like other browsers do.\n   */\n  _onClick() {\n    if (this._clickAction === 'noop') {\n      this._nativeCheckbox.nativeElement.checked = this.checked;\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n      return;\n    }\n\n    if (this.indeterminate && this._clickAction !== 'check') {\n      this.indeterminate = false;\n      // tslint:disable:max-line-length\n      // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n      // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n      // tslint:enable:max-line-length\n      Promise.resolve().then(() => this.indeterminateChange.next(this.indeterminate));\n    } else {\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n    }\n\n    this.checked = !this.checked;\n    this._checkboxFoundation.handleChange();\n\n    // Dispatch our change event\n    const newEvent = new MatCheckboxChange();\n    newEvent.source = this as any;\n    newEvent.checked = this.checked;\n    this._cvaOnChange(this.checked);\n    this.change.next(newEvent);\n  }\n\n  /** Gets the value for the `aria-checked` attribute of the native input. */\n  _getAriaChecked(): 'true'|'false'|'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  /** Sets whether the given CSS class should be applied to the native input. */\n  private _setClass(cssClass: string, active: boolean) {\n    this._classes[cssClass] = active;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n"],"names":["MatCommonModule","_MatCheckboxRequiredValidatorModule","MatRippleModule","CommonModule","NgModule","ViewChild","Output","Input","Optional","Inject","ANIMATION_MODULE_TYPE","MAT_CHECKBOX_CLICK_ACTION","Attribute","ChangeDetectionStrategy","ViewEncapsulation","Component","coerceBooleanProperty","MDCCheckboxFoundation","numbers","EventEmitter","forwardRef","NG_VALUE_ACCESSOR"],"mappings":"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"}