{"version":3,"file":"material-experimental-mdc-slide-toggle.umd.min.js","sources":["../../src/material-experimental/mdc-slide-toggle/slide-toggle-config.ts","../../src/material-experimental/mdc-slide-toggle/slide-toggle.ts","../../src/material-experimental/mdc-slide-toggle/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /**\n   * Whether drag action triggers value changes in slide toggle.\n   * @deprecated No longer being used.\n   * @breaking-change 9.0.0.\n   */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n  AfterViewInit,\n  OnDestroy,\n  forwardRef,\n  ViewChild,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  Attribute,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {MDCSwitchAdapter, MDCSwitchFoundation} from '@material/switch';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {ThemePalette, RippleAnimationConfig} from '@angular/material/core';\nimport {numbers} from '@material/ripple';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions,\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  host: {\n    'class': 'mat-mdc-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-mdc-slide-toggle-focused]': '_focused',\n    '[class.mat-mdc-slide-toggle-checked]': 'checked',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  exportAs: 'matSlideToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n\n})\nexport class MatSlideToggle implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n  private _foundation: MDCSwitchFoundation;\n  private _adapter: MDCSwitchAdapter = {\n    addClass: (className) => {\n      this._toggleClass(className, true);\n    },\n    removeClass: (className) => {\n      this._toggleClass(className, false);\n    },\n    setNativeControlChecked: (checked) => {\n      this._checked = checked;\n    },\n    setNativeControlDisabled: (disabled) => {\n      this._disabled = disabled;\n    },\n  };\n\n  /** Whether the slide toggle is currently focused. */\n  _focused: boolean;\n\n  /** The set of classes that should be applied to the native input. */\n  _classes: {[key: string]: boolean} = {'mdc-switch': true};\n\n  /** Configuration for the underlying ripple. */\n  _rippleAnimation: RippleAnimationConfig = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS,\n  };\n\n  /** The color palette  for this slide toggle. */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Tabindex for the input element. */\n  @Input()\n  get tabIndex(): number { return this._tabIndex; }\n  set tabIndex(value: number) {\n    this._tabIndex = coerceNumberProperty(value);\n  }\n  private _tabIndex: number;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n\n    if (this._foundation) {\n      this._foundation.setChecked(this._checked);\n    }\n  }\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Whether the slide toggle is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n\n    if (this._foundation) {\n      this._foundation.setDisabled(this._disabled);\n    }\n  }\n  private _disabled = false;\n\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Event will be dispatched each time the slide-toggle input is toggled. */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   * @deprecated No longer being used.\n   * @breaking-change 9.0.0\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    const foundation = this._foundation = new MDCSwitchFoundation(this._adapter);\n    foundation.setDisabled(this.disabled);\n    foundation.setChecked(this.checked);\n  }\n\n  ngOnDestroy() {\n    if (this._foundation) {\n      this._foundation.destroy();\n    }\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n    this._foundation.handleChange(event);\n\n    // When the slide toggle's config disabled toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change,\n    // and the checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Toggles a class on the switch element. */\n  private _toggleClass(cssClass: string, active: boolean) {\n    this._classes[cssClass] = active;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {_MatSlideToggleRequiredValidatorModule} from '@angular/material/slide-toggle';\nimport {MatSlideToggle} from './slide-toggle';\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatCommonModule,\n    MatRippleModule,\n    CommonModule\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {\n}\n"],"names":["MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatSlideToggle","multi","MatSlideToggleChange","source","checked","this","_changeDetectorRef","tabIndex","defaults","_animationMode","_this","_onChange","_","_onTouched","_uniqueId","_required","_checked","_adapter","addClass","className","_toggleClass","removeClass","setNativeControlChecked","setNativeControlDisabled","disabled","_disabled","_classes","mdc-switch","_rippleAnimation","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","color","name","id","labelPosition","ariaLabel","ariaLabelledby","_disableRipple","change","EventEmitter","toggleChange","dragChange","parseInt","Object","defineProperty","prototype","_tabIndex","value","coerceNumberProperty","coerceBooleanProperty","_foundation","setChecked","disableRipple","setDisabled","ngAfterViewInit","foundation","MDCSwitchFoundation","ngOnDestroy","destroy","_onChangeEvent","event","stopPropagation","emit","handleChange","_inputElement","nativeElement","_onInputClick","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","toggle","_onBlur","Promise","resolve","then","_focused","cssClass","active","type","Component","args","selector","template","styles","host","class","[id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.mat-mdc-slide-toggle-focused]","[class.mat-mdc-slide-toggle-checked]","[class._mat-animation-noopable]","(focus)","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","undefined","decorators","Inject","String","Optional","ANIMATION_MODULE_TYPE","propDecorators","Input","required","Output","ViewChild","static","MatSlideToggleModule","NgModule","imports","_MatSlideToggleRequiredValidatorModule","MatCommonModule","MatRippleModule","CommonModule","exports","declarations"],"mappings":"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"}