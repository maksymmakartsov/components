{"version":3,"file":"chip-grid.js","sourceRoot":"","sources":["../../../../../src/material-experimental/mdc-chips/chip-grid.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {MatChipTextControl} from './chip-text-control';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {GridFocusKeyManager} from './grid-focus-key-manager';\n\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              _dir: Directionality,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir);\n  }\n}\nconst _MatChipGridMixinBase: CanUpdateErrorStateCtor & typeof MatChipGridBase =\n    mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-grid',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid extends _MatChipGridMixinBase implements AfterContentInit, AfterViewInit,\n  CanUpdateErrorState, ControlValueAccessor, DoCheck, MatFormFieldControl<any>, OnDestroy {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The GridFocusKeyManager which handles focus. */\n  _keyManager: GridFocusKeyManager;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string { return this._chipInput.id; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean { return this._chipInput.empty && this._chips.length === 0; }\n\n    /** The ARIA role applied to the chip grid. */\n  get role(): string | null { return this.empty ? null : 'grid'; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  get focused(): boolean { return this._chipInput.focused || this._hasFocusedChip(); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n      new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipRow>;\n\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm,\n        _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (!this._chipInput) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._setMdcClass('mdc-chip-set--input', true);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event) && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (this._chips.length > 0) {\n      this._keyManager.setFirstCellActive();\n    } else {\n      this._focusInput();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    // Check whether the focus moved to chip input.\n    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n    // to chip input, do nothing.\n    // Timeout is needed to wait for the focus() event trigger on chip input.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._keyManager.setActiveCell({row: -1, column: -1});\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._chipInput.focused) {\n      return;\n    }\n\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isEmptyInput(target)) {\n      if (this._chips.length) {\n        this._keyManager.setLastCellActive();\n      }\n      event.preventDefault();\n    } else if (event.keyCode === TAB && target.id !== this._chipInput!.id ) {\n      this._allowFocusEscape();\n    } else if (this._originatesFromChip(event)) {\n      this._keyManager.onKeydown(event);\n    }\n    this.stateChanges.next();\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new GridFocusKeyManager(this._chips)\n      .withDirectionality(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withDirectionality(dir));\n    }\n  }\n\n   /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipRow);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveCell({row: chipIndex, column: 0});\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(\n      chip => chip.value) : fallbackValue;\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * If the amount of chips changed, we need to focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveCell({\n          row: newChipIndex,\n          column: this._keyManager.activeColumnIndex\n        });\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /** Focus input element. */\n  private _focusInput() {\n    this._chipInput.focus();\n  }\n\n  /** Returns true if element is an input with no value. */\n  private _isEmptyInput(element: HTMLElement): boolean {\n    if (element && element.id === this._chipInput!.id) {\n      return this._chipInput.empty;\n    }\n\n    return false;\n  }\n}\n"]}