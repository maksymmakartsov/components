{"version":3,"file":"chip-listbox.js","sourceRoot":"","sources":["../../../../../src/material-experimental/mdc-chips/chip-listbox.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-listbox',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox extends MatChipSet implements AfterContentInit, ControlValueAccessor {\n\n  /** Subscription to selection changes in the chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The ARIA role applied to the chip listbox. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption  {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    this._initializeSelection();\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this._chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n      new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipOption>;\n\n  constructor(protected _elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality) {\n    super(_elementRef, _changeDetectorRef, _dir);\n    this._chipSetAdapter.selectChipAtIndex = (index: number, selected: boolean) => {\n      this._setSelected(index, selected);\n    };\n    // Reinitialize the foundation with our overridden adapter\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n    this._updateMdcSelectionClasses();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip) {\n      const firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n      this._keyManager.setActiveItem(firstSelectedChipIndex);\n    } else if (this._chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /** Selects or deselects a chip by id. */\n  _setSelected(index: number, selected: boolean) {\n    const chip = this._chips.toArray()[index];\n    if (chip && chip.selected != selected) {\n      chip.toggleSelected(true);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this.focused) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    // Wait to see if focus moves to an indivdual chip.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n   */\n  _keydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the chip listbox selection state to reflect any chips that were preselected.\n   */\n  private _initializeSelection() {\n    setTimeout(() => {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      this._chips.forEach(chip => {\n        if (chip.selected) {\n          this._chipSetFoundation.select(chip.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Sets the mdc classes for single vs multi selection. */\n  private _updateMdcSelectionClasses() {\n    this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n    this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatChip>(this._chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsSelection();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipOption);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n    });\n  }\n\n  /** Subscribes to selection changes in the option chips. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n      (chipSelectionChange: MatChipSelectionChange) => {\n        this._chipSetFoundation.handleChipSelection(\n          chipSelectionChange.source.id, chipSelectionChange.selected, false);\n        if (chipSelectionChange.isUserInput) {\n          this._propagateChanges();\n        }\n    });\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n}\n\n"]}