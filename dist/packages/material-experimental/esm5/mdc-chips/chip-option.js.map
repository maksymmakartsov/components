{"version":3,"file":"chip-option.js","sourceRoot":"","sources":["../../../../../src/material-experimental/mdc-chips/chip-option.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {MatChip} from './chip';\n\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n/**\n * An extension of the MatChip component that supports chip selection.\n * Used with MatChipListbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-basic-chip-option, mat-chip-option',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'option',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[id]': 'id',\n    '[tabIndex]': 'tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_click($event)',\n    '(keydown)': '_keydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipOption}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip {\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._chipFoundation.isSelected();\n  }\n  set selected(value: boolean) {\n    if (!this.selectable) {\n      return;\n    }\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue != this._chipFoundation.isSelected()) {\n      this._chipFoundation.setSelected(coerceBooleanProperty(value));\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (!this.selectable) {\n      return;\n    } else if (this.selected) {\n      this._chipFoundation.setSelected(false);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    if (!this.selectable) {\n      return this.selected;\n    }\n\n    this._chipFoundation.setSelected(!this.selected);\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Emits a selection change event. */\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this.selected\n    });\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocusInternal = true;\n  }\n\n  /** Resets the state of the chip when it loses focus. */\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocusInternal = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n\n  /** Handles click events on the chip. */\n  _click(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      this._handleInteraction(event);\n      event.stopPropagation();\n    }\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n        this.toggleSelected(true);\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n"]}