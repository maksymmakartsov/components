{"version":3,"file":"chip-row.js","sourceRoot":"","sources":["../../../../../src/material-experimental/mdc-chips/chip-row.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatChip} from './chip';\nimport {GridKeyManagerRow, NAVIGATION_KEYS} from './grid-key-manager';\n\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-row, mat-basic-chip-row',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'row',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[tabIndex]': 'tabIndex',\n    '(mousedown)': '_mousedown($event)',\n    '(keydown)': '_keydown($event)',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)',\n    '(focusin)': '_focusin()',\n    '(focusout)': '_focusout()'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipRow}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterContentInit, AfterViewInit,\n  GridKeyManagerRow<HTMLElement> {\n  protected basicChipAttrName = 'mat-basic-chip-row';\n\n  /**\n   * The focusable wrapper element in the first gridcell, which contains all\n   * chip content other than the remove icon.\n   */\n  @ViewChild('chipContent', {static: false}) chipContent: ElementRef;\n\n  /** The focusable grid cells for this row. Implemented as part of GridKeyManagerRow. */\n  cells!: HTMLElement[];\n\n  /** Key codes for which this component has a custom handler. */\n  HANDLED_KEYS = NAVIGATION_KEYS.concat([BACKSPACE, DELETE]);\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.removeIcon) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      setTimeout(() => {\n        // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n        // the GridFocusKeyManager for row chips.\n        this.removeIcon.tabIndex = -1;\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.cells = this.removeIcon ?\n      [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n      [this.chipContent.nativeElement];\n  }\n\n  /**\n   * Allows for programmatic focusing of the chip.\n   * Sends focus to the first grid cell. The row chip element itself\n   * is never focused.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocusInternal) {\n      this._onFocus.next({chip: this});\n    }\n\n    this.chipContent.nativeElement.focus();\n  }\n\n  /**\n   * Emits a blur event when one of the gridcells loses focus, unless focus moved\n   * to the other gridcell.\n   */\n  _focusout() {\n    this._hasFocusInternal = false;\n    // Wait to see if focus moves to the other gridcell\n    setTimeout(() => {\n      if (this._hasFocus) {\n        return;\n      }\n      this._onBlur.next({chip: this});\n    });\n  }\n\n  /** Records that the chip has focus when one of the gridcells is focused. */\n  _focusin() {\n    this._hasFocusInternal = true;\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _mousedown(event: MouseEvent) {\n    if (!this.disabled) {\n      this.focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // Remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n"]}