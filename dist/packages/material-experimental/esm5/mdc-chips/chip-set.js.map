{"version":3,"file":"chip-set.js","sourceRoot":"","sources":["../../../../../src/material-experimental/mdc-chips/chip-set.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {HasTabIndex, HasTabIndexCtor, mixinTabIndex} from '@angular/material/core';\nimport {MDCChipSetAdapter, MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\n\n\nlet uid = 0;\n\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nclass MatChipSetBase {\n  disabled!: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase: HasTabIndexCtor & typeof MatChipSetBase =\n    mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-set',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-chip-set',\n    '[attr.role]': 'role',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[id]': '_uid',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet extends _MatChipSetMixinBase implements AfterContentInit, AfterViewInit,\n  HasTabIndex, OnDestroy {\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** Subscription to destroyed events in chips. */\n  private _chipDestroyedSubscription: Subscription | null;\n\n  /** Subscription to chip interactions. */\n  private _chipInteractionSubscription: Subscription | null;\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  protected _lastDestroyedChipIndex: number | null = null;\n\n  /** The MDC foundation containing business logic for MDC chip-set. */\n  protected _chipSetFoundation: MDCChipSetFoundation;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /**\n   * Implementation of the MDC chip-set adapter interface.\n   * These methods are called by the chip set foundation.\n   */\n  protected _chipSetAdapter: MDCChipSetAdapter = {\n    hasClass: (className) => this._hasMdcClass(className),\n    // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n    // removed.\n    removeChipAtIndex: () => {},\n    // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n    selectChipAtIndex: () => {},\n    getIndexOfChipById: (id: string) => this._chips.toArray().findIndex(chip => chip.id === id),\n    focusChipPrimaryActionAtIndex: () => {},\n    focusChipTrailingActionAtIndex: () => {},\n    removeFocusFromChipAtIndex: () => {},\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    getChipListCount: () => this._chips.length,\n  };\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Uid of the chip set */\n  _uid: string = `mat-mdc-chip-set-${uid++}`;\n\n  /**\n   * Map from class to whether the class is enabled.\n   * Enabled classes are set on the MDC chip-set div.\n   */\n  _mdcClasses: {[key: string]: boolean} = {};\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean { return this._chips.length === 0; }\n\n  /** The ARIA role applied to the chip set. */\n  get role(): string | null { return this.empty ? null : 'presentation'; }\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean { return this._hasFocusedChip(); }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.removed));\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.destroyed));\n  }\n\n  /** Combined stream of all of the child chips' interaction events. */\n  get chipInteractionChanges(): Observable<string> {\n    return merge(...this._chips.map(chip => chip.interaction));\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip) _chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              @Optional() protected _dir: Directionality) {\n    super(_elementRef);\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n  }\n\n  ngAfterViewInit() {\n    this._chipSetFoundation.init();\n  }\n\n  ngAfterContentInit() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipSetFoundation.destroy();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  protected _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Adapter method that returns true if the chip set has the given MDC class. */\n  protected _hasMdcClass(className: string) {\n    return this._elementRef.nativeElement.classList.contains(className);\n  }\n\n  /** Updates subscriptions to chip events. */\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._subscribeToChipEvents();\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    this._listenToChipsRemove();\n    this._listenToChipsDestroyed();\n    this._listenToChipsInteraction();\n  }\n\n  /** Subscribes to chip removal events. */\n  private _listenToChipsRemove() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event: MatChipEvent) => {\n       this._chipSetFoundation.handleChipRemoval(event.chip.id);\n    });\n  }\n\n  /** Subscribes to chip destroyed events. */\n  private _listenToChipsDestroyed() {\n    this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe((event: MatChipEvent) => {\n      const chip = event.chip;\n      const chipIndex: number = this._chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Subscribes to chip interaction events. */\n  private _listenToChipsInteraction() {\n    this._chipInteractionSubscription = this.chipInteractionChanges.subscribe((id: string) => {\n      this._chipSetFoundation.handleChipInteraction(id);\n    });\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n\n    if (this._chipInteractionSubscription) {\n      this._chipInteractionSubscription.unsubscribe();\n      this._chipInteractionSubscription = null;\n    }\n\n    if (this._chipDestroyedSubscription) {\n      this._chipDestroyedSubscription.unsubscribe();\n      this._chipDestroyedSubscription = null;\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mdc-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n\n"]}