{"version":3,"file":"button-base.js","sourceRoot":"","sources":["../../../../../src/material-experimental/mdc-button/button-base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, NgZone, ViewChild} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleAnimationConfig\n} from '@angular/material/core';\nimport {numbers} from '@material/ripple';\n\n/** Inputs common to all buttons. */\nexport const MAT_BUTTON_INPUTS = ['disabled', 'disableRipple', 'color'];\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {selector: string, mdcClasses: string[]}[] = [\n  {\n    selector: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    selector: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    selector: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    selector: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    selector: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    selector: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    selector: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  }\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonMixinCore {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonBaseMixin: CanDisableRippleCtor&CanDisableCtor&CanColorCtor&\n    typeof MatButtonMixinCore = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonMixinCore)));\n\n/** Base class for all buttons.  */\nexport class MatButtonBase extends _MatButtonBaseMixin implements CanDisable, CanColor,\n                                                                  CanDisableRipple {\n  /** The ripple animation configuration to use for the buttons. */\n  _rippleAnimation: RippleAnimationConfig = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS\n  };\n\n  /** Whether the ripple is centered on the button. */\n  _isRippleCentered = false;\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(\n      elementRef: ElementRef, public _platform: Platform, public _ngZone: NgZone,\n      public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const pair of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (this._hasHostAttributes(pair.selector)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(...pair.mdcClasses);\n      }\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  private _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._elementRef.nativeElement.hasAttribute(attribute));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n}\n\n/** Shared inputs by buttons using the `<a>` tag */\nexport const MAT_ANCHOR_INPUTS = ['disabled', 'disableRipple', 'color', 'tabIndex'];\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  '(click)': '_haltDisabledEvents($event)',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n};\n\n/**\n * Anchor button base.\n */\nexport class MatAnchorBase extends MatButtonBase {\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone, animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n"]}