{"version":3,"file":"menu.js","sourceRoot":"","sources":["../../../../src/material-experimental/mdc-menu/menu.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,OAAO,EAAiB,MAAM,sBAAsB,CAAC;AAC7D,OAAO,EACL,uBAAuB,EACvB,SAAS,EACT,UAAU,EACV,MAAM,EACN,MAAM,EAEN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AACvB,OAAO,EACL,wBAAwB,EACxB,cAAc,EACd,wBAAwB,EACxB,OAAO,IAAI,WAAW,EACtB,iBAAiB,GAElB,MAAM,wBAAwB,CAAC;;;;;;AAGhC,MAAM,UAAU,gCAAgC,CAAC,OAAgB;IAC/D;;;IAAO,GAAG,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAAC;AACrD,CAAC;;;;;AAGD,MAAM,OAAO,yCAAyC,GAAa;IACjE,OAAO,EAAE,wBAAwB;IACjC,IAAI,EAAE,CAAC,OAAO,CAAC;IACf,UAAU,EAAE,gCAAgC;CAC7C;AAmBD,MAAM,OAAO,OAAQ,SAAQ,WAAW;;;;;;IAEtC,YAAY,WAAoC,EACpC,OAAe,EACmB,eAAsC;QAClF,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IAC/C,CAAC;;;;;IAED,YAAY,CAAC,MAAc;QACzB,4FAA4F;QAC5F,sFAAsF;QACtF,iDAAiD;QACjD,kFAAkF;QAClF,8DAA8D;QAC9D,kFAAkF;QAClF,yEAAyE;IAC3E,CAAC;;;YAjCF,SAAS,SAAC;gBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,WAAW;gBACxB,SAAS,EAAE,CAAC,UAAU,CAAC;gBACvB,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE;oBACV,iBAAiB,CAAC,aAAa;oBAC/B,iBAAiB,CAAC,WAAW;iBAC9B;gBACD,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,OAAO,EAAC;oBAC/C,EAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAC;iBAC7C;aACF;;;;YA3CC,UAAU;YAEV,MAAM;4CA8CO,MAAM,SAAC,wBAAwB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Provider,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  MAT_MENU_DEFAULT_OPTIONS,\n  MAT_MENU_PANEL,\n  MAT_MENU_SCROLL_STRATEGY,\n  MatMenu as BaseMatMenu,\n  matMenuAnimations,\n  MatMenuDefaultOptions,\n} from '@angular/material/menu';\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: Provider = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: BaseMatMenu, useExisting: MatMenu},\n  ]\n})\nexport class MatMenu extends BaseMatMenu {\n\n  constructor(_elementRef: ElementRef<HTMLElement>,\n              _ngZone: NgZone,\n              @Inject(MAT_MENU_DEFAULT_OPTIONS) _defaultOptions: MatMenuDefaultOptions) {\n    super(_elementRef, _ngZone, _defaultOptions);\n  }\n\n  setElevation(_depth: number) {\n    // TODO(crisbeto): MDC's styles come with elevation already and we haven't mapped our mixins\n    // to theirs. Disable the elevation stacking for now until everything has been mapped.\n    // The following unit tests should be re-enabled:\n    // - should not remove mat-elevation class from overlay when panelClass is changed\n    // - should increase the sub-menu elevation based on its depth\n    // - should update the elevation when the same menu is opened at a different depth\n    // - should not increase the elevation if the user specified a custom one\n  }\n}\n"]}