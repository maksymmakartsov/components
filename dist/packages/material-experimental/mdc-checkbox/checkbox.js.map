{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../src/material-experimental/mdc-checkbox/checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from '@angular/material/checkbox';\nimport {ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCCheckboxAdapter, MDCCheckboxFoundation} from '@material/checkbox';\nimport {numbers} from '@material/ripple';\n\nlet nextUniqueId = 0;\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[id]': 'id',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  /**\n   * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** The `aria-labelledby` attribute to use for the input element. */\n  @Input('aria-labelledby') ariaLabelledby: string|null = null;\n\n  /** The color palette  for this checkbox ('primary', 'accent', or 'warn'). */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n  @Input() labelPosition: 'before'|'after' = 'after';\n\n  /** The `name` attribute to use for the input element. */\n  @Input() name: string|null = null;\n\n  /** The `tabindex` attribute to use for the input element. */\n  @Input() tabIndex: number;\n\n  /** The `value` attribute to use for the input element */\n  @Input() value: string;\n\n  private _uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(checked) {\n    this._checked = coerceBooleanProperty(checked);\n  }\n  private _checked = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(indeterminate) {\n    this._indeterminate = coerceBooleanProperty(indeterminate);\n  }\n  private _indeterminate = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(required) {\n    this._required = coerceBooleanProperty(required);\n  }\n  private _required = false;\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output()\n  readonly change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The root element for the `MDCCheckbox`. */\n  @ViewChild('checkbox', {static: false}) _checkbox: ElementRef<HTMLElement>;\n\n  /** The native input element. */\n  @ViewChild('nativeCheckbox', {static: false}) _nativeCheckbox: ElementRef<HTMLInputElement>;\n\n  /** The native label element. */\n  @ViewChild('label', {static: false}) _label: ElementRef<HTMLElement>;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** The `MDCCheckboxFoundation` instance for this checkbox. */\n  _checkboxFoundation: MDCCheckboxFoundation;\n\n  /** The set of classes that should be applied to the native input. */\n  _classes: {[key: string]: boolean} = {'mdc-checkbox__native-control': true};\n\n  /** Animation config for the ripple. */\n  _rippleAnimation = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS,\n  };\n\n  /** ControlValueAccessor onChange */\n  private _cvaOnChange = (_: boolean) => {};\n\n  /** ControlValueAccessor onTouch */\n  private _cvaOnTouch = () => {};\n\n  /**\n   * A list of attributes that should not be modified by `MDCFoundation` classes.\n   *\n   * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n   * Therefore we disable it and handle it ourselves.\n   */\n  private _attrBlacklist = new Set(['aria-checked']);\n\n  /** The `MDCCheckboxAdapter` instance for this checkbox. */\n  private _checkboxAdapter: MDCCheckboxAdapter = {\n    addClass: (className) => this._setClass(className, true),\n    removeClass: (className) => this._setClass(className, false),\n    forceLayout: () => this._platform.isBrowser && this._checkbox.nativeElement.offsetWidth,\n    hasNativeControl: () => !!this._nativeCheckbox,\n    isAttachedToDOM: () => !!this._checkbox.nativeElement.parentNode,\n    isChecked: () => this.checked,\n    isIndeterminate: () => this.indeterminate,\n    removeNativeControlAttr:\n        (attr) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.removeAttribute(attr);\n          }\n        },\n    setNativeControlAttr:\n        (attr, value) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n          }\n        },\n    setNativeControlDisabled: (disabled) => this.disabled = disabled,\n  };\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      private _platform: Platform,\n      @Attribute('tabindex') tabIndex: string,\n      @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION) private _clickAction: MatCheckboxClickAction,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._checkboxFoundation = new MDCCheckboxFoundation(this._checkboxAdapter);\n    // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n    // ripple, which we do ourselves instead.\n  }\n\n  ngAfterViewInit() {\n    this._checkboxFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this._checkboxFoundation.destroy();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnChange(fn: (checked: boolean) => void) {\n    this._cvaOnChange = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void) {\n    this._cvaOnTouch = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._nativeCheckbox.nativeElement.focus();\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle() {\n    this.checked = !this.checked;\n    this._cvaOnChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._cvaOnTouch();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Handles click events on the native input.\n   *\n   * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n   * not actually change the checked state when the user clicks an indeterminate checkbox. By\n   * listening to `click` instead we can override and normalize the behavior to change the checked\n   * state like other browsers do.\n   */\n  _onClick() {\n    if (this._clickAction === 'noop') {\n      this._nativeCheckbox.nativeElement.checked = this.checked;\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n      return;\n    }\n\n    if (this.indeterminate && this._clickAction !== 'check') {\n      this.indeterminate = false;\n      // tslint:disable:max-line-length\n      // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n      // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n      // tslint:enable:max-line-length\n      Promise.resolve().then(() => this.indeterminateChange.next(this.indeterminate));\n    } else {\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n    }\n\n    this.checked = !this.checked;\n    this._checkboxFoundation.handleChange();\n\n    // Dispatch our change event\n    const newEvent = new MatCheckboxChange();\n    newEvent.source = this as any;\n    newEvent.checked = this.checked;\n    this._cvaOnChange(this.checked);\n    this.change.next(newEvent);\n  }\n\n  /** Gets the value for the `aria-checked` attribute of the native input. */\n  _getAriaChecked(): 'true'|'false'|'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  /** Sets whether the given CSS class should be applied to the native input. */\n  private _setClass(cssClass: string, active: boolean) {\n    this._classes[cssClass] = active;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n"]}