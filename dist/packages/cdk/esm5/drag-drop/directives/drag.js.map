{"version":3,"file":"drag.js","sourceRoot":"","sources":["../../../../../../src/cdk/drag-drop/directives/drag.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAEL,YAAY,EACZ,eAAe,EACf,SAAS,EACT,UAAU,EACV,YAAY,EACZ,MAAM,EACN,cAAc,EACd,KAAK,EACL,MAAM,EAEN,QAAQ,EACR,MAAM,EACN,SAAS,EACT,QAAQ,EACR,gBAAgB,EAGhB,iBAAiB,EACjB,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,qBAAqB,EAAE,oBAAoB,EAAE,aAAa,EAAC,MAAM,uBAAuB,CAAC;AACjG,OAAO,EAAC,UAAU,EAAY,OAAO,EAAE,KAAK,EAAC,MAAM,MAAM,CAAC;AAC1D,OAAO,EAAC,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAC,MAAM,gBAAgB,CAAC;AAU/E,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAC,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAC,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAC,aAAa,EAAC,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAC,eAAe,EAAC,MAAM,gBAAgB,CAAC;AAG/C,OAAO,EAAC,QAAQ,EAAC,MAAM,cAAc,CAAC;;;;;AAGtC,MAAM,KAAO,eAAe,GAAG,IAAI,cAAc,CAAgB,iBAAiB,EAAE;IAClF,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,uBAAuB;CACjC,CAAC;;;;;AAGF,MAAM,UAAU,uBAAuB;IACrC,OAAO,EAAC,kBAAkB,EAAE,CAAC,EAAE,+BAA+B,EAAE,CAAC,EAAC,CAAC;AACrE,CAAC;;;;;AAGD;IAoIE,iBAEW,OAAgC,EAEe,aAA0B,EACtD,SAAc,EAAU,OAAe,EACzD,iBAAmC,EAA2B,MAAqB,EACvE,IAAoB,EAAE,QAAkB,EACpD,kBAAqC;QARjD,iBAaC;QAXU,YAAO,GAAP,OAAO,CAAyB;QAEe,kBAAa,GAAb,aAAa,CAAa;QACtD,cAAS,GAAT,SAAS,CAAK;QAAU,YAAO,GAAP,OAAO,CAAQ;QACzD,sBAAiB,GAAjB,iBAAiB,CAAkB;QACvB,SAAI,GAAJ,IAAI,CAAgB;QAChC,uBAAkB,GAAlB,kBAAkB,CAAmB;QAjIzC,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;;;;;QAqDb,mBAAc,GAAW,CAAC,CAAC;QAiB/C,cAAS,GAAG,KAAK,CAAC;;;;QAWA,YAAO,GAA+B,IAAI,YAAY,EAAgB,CAAC;;;;QAGtE,aAAQ,GAC/B,IAAI,YAAY,EAAkB,CAAC;;;;QAGf,UAAK,GAA6B,IAAI,YAAY,EAAc,CAAC;;;;QAG/D,YAAO,GAC7B,IAAI,YAAY,EAAqB,CAAC;;;;QAGjB,WAAM,GAC3B,IAAI,YAAY,EAAoB,CAAC;;;;QAGf,YAAO,GAC7B,IAAI,YAAY,EAAoB,CAAC;;;;;QAMjB,UAAK,GACzB,IAAI,UAAU;;;;QAAC,UAAC,QAAkC;;gBAC1C,YAAY,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;;;;YAAC,UAAA,UAAU,IAAI,OAAA,CAAC;gBAC/D,MAAM,EAAE,KAAI;gBACZ,eAAe,EAAE,UAAU,CAAC,eAAe;gBAC3C,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,QAAQ,EAAE,UAAU,CAAC,QAAQ;aAC9B,CAAC,EAN8D,CAM9D,EAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC;YAExB;;;YAAO;gBACL,YAAY,CAAC,WAAW,EAAE,CAAC;YAC7B,CAAC,EAAC;QACJ,CAAC,EAAC,CAAC;QAWL,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IA5FD,sBAAI,4CAAuB;QAP3B;;;;;;WAMG;;;;;;;;;QACH;YACE,OAAO,OAAO,IAAI,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAA,SAAS,EAAC,CAAC;QACtF,CAAC;;;;;QACD,UAA4B,QAAgB;YAC1C,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAClC,CAAC;;;OAHA;IAkBD,sBACI,6BAAQ;QAFZ,yDAAyD;;;;;QACzD;YAEE,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC/E,CAAC;;;;;QACD,UAAa,KAAc;YACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAC1C,CAAC;;;OAJA;IAuED;;;OAGG;;;;;;IACH,uCAAqB;;;;;IAArB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;IAC/C,CAAC;IAED,0CAA0C;;;;;IAC1C,gCAAc;;;;IAAd;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;IACxC,CAAC;IAED,6DAA6D;;;;;IAC7D,uBAAK;;;;IAAL;QACE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;;;;;IACH,qCAAmB;;;;IAAnB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;IAC7C,CAAC;;;;IAED,iCAAe;;;IAAf;QAAA,iBAoCC;QAnCC,wEAAwE;QACxE,wEAAwE;QACxE,sEAAsE;QACtE,2EAA2E;QAC3E,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE;aACjC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACzC,SAAS;;;QAAC;YACT,KAAI,CAAC,kBAAkB,EAAE,CAAC;YAE1B,sCAAsC;YACtC,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CACxB,SAAS,CAAC,KAAI,CAAC,QAAQ,CAAC;YACxB,yCAAyC;YACzC,GAAG;;;;YAAC,UAAC,OAAiC;;oBAC9B,mBAAmB,GAAG,OAAO;qBAChC,MAAM;;;;gBAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,WAAW,KAAK,KAAI,EAA3B,CAA2B,EAAC;qBAC7C,GAAG;;;;gBAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAd,CAAc,EAAC;gBAChC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;YACjD,CAAC,EAAC;YACF,qDAAqD;YACrD,SAAS;;;;YAAC,UAAC,OAAiC;gBAC1C,OAAO,KAAK,eAAI,OAAO,CAAC,GAAG;;;;gBAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,aAAa,EAAlB,CAAkB,EAAC,EAAE;YAC3D,CAAC,EAAC,EACF,SAAS,CAAC,KAAI,CAAC,UAAU,CAAC,CAC3B,CAAC,SAAS;;;;YAAC,UAAA,cAAc;;;oBAElB,OAAO,GAAG,KAAI,CAAC,QAAQ;;oBACvB,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,aAAa;gBACnD,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACzF,CAAC,EAAC,CAAC;YAEH,IAAI,KAAI,CAAC,gBAAgB,EAAE;gBACzB,KAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC;aAC1D;QACH,CAAC,EAAC,CAAC;IACP,CAAC;;;;;IAED,6BAAW;;;;IAAX,UAAY,OAAsB;;YAC1B,kBAAkB,GAAG,OAAO,CAAC,qBAAqB,CAAC;;YACnD,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAElD,8DAA8D;QAC9D,8DAA8D;QAC9D,IAAI,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE;YACzD,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;QAED,uEAAuE;QACvE,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,WAAW,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC1E,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC1D;IACH,CAAC;;;;IAED,6BAAW;;;IAAX;QACE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,iDAAiD;;;;;;IACzC,oCAAkB;;;;;IAA1B;;YACQ,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa;;YACpC,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC1C,0BAA0B,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO;QAE3E,IAAI,WAAW,IAAI,WAAW,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YACvE,MAAM,KAAK,CAAC,+CAA+C;iBAC/C,6BAA0B,WAAW,CAAC,QAAQ,QAAI,CAAA,CAAC,CAAC;SACjE;QAED,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC;IACxD,CAAC;IAED,uEAAuE;;;;;;IAC/D,qCAAmB;;;;;IAA3B;;YACQ,QAAQ,GAAG,IAAI,CAAC,eAAe;QAErC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,OAAO,0BAA0B,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;SACzE;;YAEK,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC;QAEvC,IAAI,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAChE,MAAM,KAAK,CAAC,0EAA0E,CAAC,CAAC;SACzF;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,kFAAkF;;;;;;;IAC1E,6BAAW;;;;;;IAAnB,UAAoB,GAAwB;QAA5C,iBA6BC;QA5BC,GAAG,CAAC,aAAa,CAAC,SAAS;;;QAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE;;oBACf,GAAG,GAAG,KAAI,CAAC,IAAI;;oBACf,WAAW,GAAG,KAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBAC9C,QAAQ,EAAE,KAAI,CAAC,oBAAoB,CAAC,WAAW;oBAC/C,OAAO,EAAE,KAAI,CAAC,oBAAoB,CAAC,IAAI;oBACvC,aAAa,EAAE,KAAI,CAAC,iBAAiB;iBACtC,CAAC,CAAC,CAAC,IAAI;;oBACF,OAAO,GAAG,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACtC,QAAQ,EAAE,KAAI,CAAC,gBAAgB,CAAC,WAAW;oBAC3C,OAAO,EAAE,KAAI,CAAC,gBAAgB,CAAC,IAAI;oBACnC,aAAa,EAAE,KAAI,CAAC,iBAAiB;iBACtC,CAAC,CAAC,CAAC,IAAI;gBAER,GAAG,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC;gBAC7B,GAAG,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC;gBAC7B,GAAG,CAAC,cAAc,GAAG,oBAAoB,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;gBAC/D,GAAG,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC;gBAC/C,GAAG;qBACA,mBAAmB,CAAC,KAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC/C,uBAAuB,CAAC,WAAW,CAAC;qBACpC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAEhC,IAAI,GAAG,EAAE;oBACP,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBAC9B;aACF;QACH,CAAC,EAAC,CAAC;IACL,CAAC;IAED,wDAAwD;;;;;;;IAChD,+BAAa;;;;;;IAArB,UAAsB,GAAwB;QAA9C,iBA+CC;QA9CC,GAAG,CAAC,OAAO,CAAC,SAAS;;;QAAC;YACpB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,KAAI,EAAC,CAAC,CAAC;YAElC,6DAA6D;YAC7D,yDAAyD;YACzD,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QACzC,CAAC,EAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,SAAS;;;QAAC;YACrB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,KAAI,EAAC,CAAC,CAAC;QACrC,CAAC,EAAC,CAAC;QAEH,GAAG,CAAC,KAAK,CAAC,SAAS;;;;QAAC,UAAA,KAAK;YACvB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,KAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAC,CAAC,CAAC;YAE1D,6DAA6D;YAC7D,yDAAyD;YACzD,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QACzC,CAAC,EAAC,CAAC;QAEH,GAAG,CAAC,OAAO,CAAC,SAAS;;;;QAAC,UAAA,KAAK;YACzB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChB,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;gBAC/B,IAAI,EAAE,KAAI;gBACV,YAAY,EAAE,KAAK,CAAC,YAAY;aACjC,CAAC,CAAC;QACL,CAAC,EAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,SAAS;;;;QAAC,UAAA,KAAK;YACxB,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;gBAC/B,IAAI,EAAE,KAAI;aACX,CAAC,CAAC;QACL,CAAC,EAAC,CAAC;QAEH,GAAG,CAAC,OAAO,CAAC,SAAS;;;;QAAC,UAAA,KAAK;YACzB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChB,aAAa,EAAE,KAAK,CAAC,aAAa;gBAClC,YAAY,EAAE,KAAK,CAAC,YAAY;gBAChC,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,CAAC,IAAI;gBAC/C,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;gBAC/B,sBAAsB,EAAE,KAAK,CAAC,sBAAsB;gBACpD,IAAI,EAAE,KAAI;gBACV,QAAQ,EAAE,KAAK,CAAC,QAAQ;aACzB,CAAC,CAAC;QACL,CAAC,EAAC,CAAC;IACL,CAAC;;gBA3VF,SAAS,SAAC;oBACT,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,SAAS;oBACnB,IAAI,EAAE;wBACJ,OAAO,EAAE,UAAU;wBACnB,2BAA2B,EAAE,UAAU;wBACvC,2BAA2B,EAAE,uBAAuB;qBACrD;oBACD,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,OAAO,EAAC,CAAC;iBAC9D;;;;gBA3DC,UAAU;gDA0LL,MAAM,SAAC,aAAa,cAAG,QAAQ,YAAI,QAAQ;gDAC3C,MAAM,SAAC,QAAQ;gBAtLpB,MAAM;gBAMN,gBAAgB;gDAiLkC,MAAM,SAAC,eAAe;gBAnMlE,cAAc,uBAoMf,QAAQ;gBAzJP,QAAQ;gBAtBd,iBAAiB;;;2BAqDhB,eAAe,SAAC,aAAa,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC;mCAGlD,YAAY,SAAC,cAAc,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;uCAG5C,YAAY,SAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;uBAGhD,KAAK,SAAC,aAAa;2BAGnB,KAAK,SAAC,iBAAiB;sCAOvB,KAAK,SAAC,oBAAoB;kCAQ1B,KAAK,SAAC,iBAAiB;iCAoBvB,KAAK,SAAC,mBAAmB;mCAMzB,KAAK,SAAC,yBAAyB;2BAG/B,KAAK,SAAC,iBAAiB;oCAgBvB,KAAK,SAAC,0BAA0B;0BAGhC,MAAM,SAAC,gBAAgB;2BAGvB,MAAM,SAAC,iBAAiB;wBAIxB,MAAM,SAAC,cAAc;0BAGrB,MAAM,SAAC,gBAAgB;yBAIvB,MAAM,SAAC,eAAe;0BAItB,MAAM,SAAC,gBAAgB;wBAOvB,MAAM,SAAC,cAAc;;IAuOxB,cAAC;CAAA,AA5VD,IA4VC;SAlVY,OAAO;;;;;;IAClB,6BAAyC;;;;;IAGzC,2BAA8B;;;;;IAG9B,2BAAwF;;;;;IAGxF,mCAAgF;;;;;IAGhF,uCAA4F;;;;;IAG5F,uBAA8B;;;;;IAG9B,2BAA8C;;;;;;;IAO9C,sCAAyD;;;;;;;;IAQzD,kCAA0F;;;;;;IAoB1F,iCAAuD;;;;;;IAMvD,mCAA2E;;;;;IAW3E,4BAA0B;;;;;;;;IAQ1B,oCAAiG;;;;;IAGjG,0BAAiG;;;;;IAGjG,2BACuC;;;;;IAGvC,wBAAyF;;;;;IAGzF,0BAC0C;;;;;IAG1C,yBACyC;;;;;IAGzC,0BACyC;;;;;;IAMzC,wBAaO;;;;;IAIH,0BAAuC;;;;;IAEvC,gCAAgF;;;;;IAChF,4BAAwC;;;;;IAAE,0BAAuB;;;;;IACjE,oCAA2C;;;;;IAC3C,uBAAwC;;;;;IACxC,qCAA6C;;;;;;;;AAmNnD,SAAS,0BAA0B,CAAC,OAAoB,EAAE,QAAgB;;QACpE,cAAc,GAAG,mBAAA,OAAO,CAAC,aAAa,EAAsB;IAEhE,OAAO,cAAc,EAAE;QACrB,+EAA+E;QAC/E,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3D,CAAC,mBAAA,cAAc,EAAO,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE;YACvD,OAAO,cAAc,CAAC;SACvB;QAED,cAAc,GAAG,cAAc,CAAC,aAAa,CAAC;KAC/C;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  isDevMode,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview, {static: false}) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder, {static: false}) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Node or selector that will be used to determine the element to which the draggable's\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\n   * will be matched starting from the element's parent and going up the DOM until a match\n   * has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found\n   * @deprecated Use `boundaryElement` instead.\n   * @breaking-change 9.0.0\n   */\n  get boundaryElementSelector(): string {\n    return typeof this.boundaryElement === 'string' ? this.boundaryElement : undefined!;\n  }\n  set boundaryElementSelector(selector: string) {\n    this.boundaryElement = selector;\n  }\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta,\n          distance: movedEvent.distance\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n      /** Element that the draggable is attached to. */\n      public element: ElementRef<HTMLElement>,\n      /** Droppable container that the draggable is a part of. */\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\n      private _viewContainerRef: ViewContainerRef, @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this._dragRef = dragDrop.createDrag(element, config);\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  private _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n    }\n\n    const element = coerceElement(boundary);\n\n    if (isDevMode() && !element.contains(this.element.nativeElement)) {\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n    }\n\n    return element;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(event => {\n      this.ended.emit({source: this, distance: event.distance});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this,\n        distance: event.distance\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n"]}