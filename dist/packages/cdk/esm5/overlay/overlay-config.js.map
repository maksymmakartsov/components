{"version":3,"file":"overlay-config.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/overlay-config.ts"],"names":[],"mappings":";;;;;;;;;;;AAUA,OAAO,EAAiB,kBAAkB,EAAC,MAAM,gBAAgB,CAAC;;;;AAIlE;;;;IA+CE,uBAAY,MAAsB;;;;QA1ClC,mBAAc,GAAoB,IAAI,kBAAkB,EAAE,CAAC;;;;QAG3D,eAAU,GAAuB,EAAE,CAAC;;;;QAGpC,gBAAW,GAAa,KAAK,CAAC;;;;QAG9B,kBAAa,GAAuB,2BAA2B,CAAC;;;;;;QA+BhE,wBAAmB,GAAa,KAAK,CAAC;QAGpC,IAAI,MAAM,EAAE;;gBACJ,UAAU,GAAG,mBAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAA8B;YACpE,KAAkB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;gBAAzB,IAAM,GAAG,mBAAA;gBACZ,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;oBAC7B,4EAA4E;oBAC5E,oFAAoF;oBACpF,uFAAuF;oBACvF,wFAAwF;oBACxF,qFAAqF;oBACrF,uCAAuC;oBACvC,IAAI,CAAC,GAAG,CAAC,GAAG,mBAAA,MAAM,CAAC,GAAG,CAAC,EAAO,CAAC;iBAChC;aACF;SACF;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AA/DD,IA+DC;;;;;;;;;;IA7DC,yCAAoC;;;;;IAGpC,uCAA2D;;;;;IAG3D,mCAAoC;;;;;IAGpC,oCAA8B;;;;;IAG9B,sCAAgE;;;;;IAGhE,8BAAwB;;;;;IAGxB,+BAAyB;;;;;IAGzB,iCAA2B;;;;;IAG3B,kCAA4B;;;;;IAG5B,iCAA2B;;;;;IAG3B,kCAA4B;;;;;;IAM5B,kCAAuC;;;;;;;IAOvC,4CAAsC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      const configKeys = Object.keys(config) as Array<keyof OverlayConfig>;\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n"]}