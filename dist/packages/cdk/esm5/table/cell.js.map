{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../../../../src/cdk/table/cell.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ContentChild, Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\n\n\n/** Base interface for a cell definition. Captures a column's cell template definition. */\nexport interface CellDef {\n  template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({selector: '[cdkCellDef]'})\nexport class CdkCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkHeaderCellDef]'})\nexport class CdkHeaderCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkFooterCellDef]'})\nexport class CdkFooterCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {}\nconst _CdkColumnDefBase: CanStickCtor&typeof CdkColumnDefBase =\n    mixinHasStickyInput(CdkColumnDefBase);\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[cdkColumnDef]',\n  inputs: ['sticky'],\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\n})\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\n  /** Unique name for this column. */\n  @Input('cdkColumnDef')\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    // If the directive is set without a name (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (!name) {\n      return;\n    }\n\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  _name: string;\n\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  @Input('stickyEnd')\n  get stickyEnd(): boolean {\n    return this._stickyEnd;\n  }\n  set stickyEnd(v: boolean) {\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n  _stickyEnd: boolean = false;\n\n  /** @docs-private */\n  @ContentChild(CdkCellDef, {static: false}) cell: CdkCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkHeaderCellDef, {static: false}) headerCell: CdkHeaderCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkFooterCellDef, {static: false}) footerCell: CdkFooterCellDef;\n\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName: string;\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n    elementRef.nativeElement.classList.add(columnClassName);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n  host: {\n    'class': 'cdk-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-cell, td[cdk-cell]',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n"]}