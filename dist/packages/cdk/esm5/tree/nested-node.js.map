{"version":3,"file":"nested-node.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/nested-node.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from './outlet';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-nested-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-nested-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-nested-tree-node>\n *   </cdk-nested-tree-node>\n *   ```\n */\n@Directive({\n  selector: 'cdk-nested-tree-node',\n  exportAs: 'cdkNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node cdk-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkTreeNode, useExisting: CdkNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode}\n  ]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n  protected _children: T[];\n\n  /** The children node placeholder. */\n  @ContentChildren(CdkTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers) {\n    super(_elementRef, _tree);\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes as T[]);\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(takeUntil(this._destroyed))\n        .subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n        .subscribe(() => this.updateChildrenNodes());\n  }\n\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n\n  /** Add children dataNodes to the NodeOutlet */\n  protected updateChildrenNodes(children?: T[]): void {\n    const outlet = this._getNodeOutlet();\n    if (children) {\n      this._children = children;\n    }\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Clear the children dataNodes. */\n  protected _clear(): void {\n    const outlet = this._getNodeOutlet();\n    if (outlet) {\n      outlet.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Gets the outlet for the current node. */\n  private _getNodeOutlet() {\n    const outlets = this.nodeOutlet;\n\n    // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n}\n"]}