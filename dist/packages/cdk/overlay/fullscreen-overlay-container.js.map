{"version":3,"file":"fullscreen-overlay-container.js","sourceRoot":"","sources":["../../../../src/cdk/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAE,MAAM,EAAY,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;;;;;;;;;;AAWzC,MAAM,OAAO,0BAA2B,SAAQ,gBAAgB;;;;IAI9D,YAA8B,SAAc;QAC1C,KAAK,CAAC,SAAS,CAAC,CAAC;IACnB,CAAC;;;;IAED,WAAW;QACT,KAAK,CAAC,WAAW,EAAE,CAAC;QAEpB,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,mBAAmB,EAAE;YACzD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACzF;IACH,CAAC;;;;;IAES,gBAAgB;QACxB,KAAK,CAAC,gBAAgB,EAAE,CAAC;QACzB,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,IAAI,CAAC,4BAA4B;;;QAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gCAAgC,EAAE,EAAC,CAAC;IACnF,CAAC;;;;;IAEO,gCAAgC;QACtC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO;SACR;;cAEK,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE;;cAC/C,MAAM,GAAG,iBAAiB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI;QACvD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;;;;;;IAEO,4BAA4B,CAAC,EAAc;;cAC3C,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE;QAEtC,IAAI,SAAS,EAAE;YACb,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;aACzE;YAED,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC/C,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;SAC/B;IACH,CAAC;;;;;IAEO,aAAa;QACnB,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;;kBACxB,SAAS,GAAG,mBAAA,IAAI,CAAC,SAAS,EAAO;YAEvC,IAAI,SAAS,CAAC,iBAAiB,EAAE;gBAC/B,IAAI,CAAC,oBAAoB,GAAG,kBAAkB,CAAC;aAChD;iBAAM,IAAI,SAAS,CAAC,uBAAuB,EAAE;gBAC5C,IAAI,CAAC,oBAAoB,GAAG,wBAAwB,CAAC;aACtD;iBAAM,IAAI,SAAS,CAAC,oBAAoB,EAAE;gBACzC,IAAI,CAAC,oBAAoB,GAAG,qBAAqB,CAAC;aACnD;iBAAM,IAAI,SAAS,CAAC,mBAAmB,EAAE;gBACxC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;aAClD;SACF;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;;;;;;IAMD,oBAAoB;;cACZ,SAAS,GAAG,mBAAA,IAAI,CAAC,SAAS,EAAO;QAEvC,OAAO,SAAS,CAAC,iBAAiB;YAC3B,SAAS,CAAC,uBAAuB;YACjC,SAAS,CAAC,oBAAoB;YAC9B,SAAS,CAAC,mBAAmB;YAC7B,IAAI,CAAC;IACd,CAAC;;;YA5EF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;4CAKjB,MAAM,SAAC,QAAQ;;;;;;;;IAH5B,0DAAiD;;;;;IACjD,yDAAwC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return _document.fullscreenElement ||\n           _document.webkitFullscreenElement ||\n           _document.mozFullScreenElement ||\n           _document.msFullscreenElement ||\n           null;\n  }\n}\n"]}