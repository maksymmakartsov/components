{"version":3,"file":"progress-bar.js","sourceRoot":"","sources":["../../../../../src/material/progress-bar/progress-bar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n"]}