{"version":3,"file":"icon-registry.js","sourceRoot":"","sources":["../../../../../src/material/icon/icon-registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n"]}