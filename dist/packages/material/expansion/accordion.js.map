{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../../../src/material/expansion/accordion.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE,SAAS,EAAmB,MAAM,eAAe,CAAC;AAC7F,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAC,YAAY,EAAC,MAAM,wBAAwB,CAAC;AACpD,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAC,IAAI,EAAE,GAAG,EAAE,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAChE,OAAO,EACL,aAAa,EAId,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAC,uBAAuB,EAAC,MAAM,0BAA0B,CAAC;;;;AAiBjE,MAAM,OAAO,YAAa,SAAQ,YAAY;IAZ9C;;QAsBU,gBAAW,GAAY,KAAK,CAAC;;;;;;;;;QAU5B,gBAAW,GAA4B,SAAS,CAAC;;;;QAGjD,mBAAc,GAA+B,OAAO,CAAC;IA6BhE,CAAC;;;;;IA7CC,IACI,UAAU,KAAc,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;;;;IACtD,IAAI,UAAU,CAAC,IAAa,IAAI,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;IAgBjF,kBAAkB;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IACnE,CAAC;;;;;;IAGD,oBAAoB,CAAC,KAAoB;cACjC,EAAC,OAAO,EAAC,GAAG,KAAK;;cACjB,OAAO,GAAG,IAAI,CAAC,WAAW;QAEhC,IAAI,OAAO,KAAK,IAAI,EAAE;YACpB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC1B,OAAO,CAAC,kBAAkB,EAAE,CAAC;gBAC7B,KAAK,CAAC,cAAc,EAAE,CAAC;aACxB;SACF;aAAM,IAAI,OAAO,KAAK,GAAG,EAAE;YAC1B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC1B,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAC5B,KAAK,CAAC,cAAc,EAAE,CAAC;aACxB;SACF;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACnC;IACH,CAAC;;;;;IAED,kBAAkB,CAAC,MAA+B;QAChD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;;;YA/DF,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,cAAc;gBACxB,MAAM,EAAE,CAAC,OAAO,CAAC;gBACjB,SAAS,EAAE,CAAC;wBACV,OAAO,EAAE,aAAa;wBACtB,WAAW,EAAE,YAAY;qBAC1B,CAAC;gBACF,IAAI,EAAE;oBACJ,KAAK,EAAE,eAAe;iBACvB;aACF;;;uBAIE,eAAe,SAAC,uBAAuB,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC;yBAI5D,KAAK;0BAaL,KAAK;6BAGL,KAAK;;;;;;;IAtBN,mCAA8D;;IAE9D,gCAC6C;;;;;IAM7C,mCAAqC;;;;;;;;;;IAUrC,mCAA0D;;;;;IAG1D,sCAA8D","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n"]}