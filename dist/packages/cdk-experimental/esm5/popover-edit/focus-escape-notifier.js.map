{"version":3,"file":"focus-escape-notifier.js","sourceRoot":"","sources":["../../../../../src/cdk-experimental/popover-edit/focus-escape-notifier.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AACzD,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAC,SAAS,EAAE,oBAAoB,EAAC,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAa,OAAO,EAAC,MAAM,MAAM,CAAC;;;;;;IAIvC,QAAK;IACL,MAAG;;;;;;;AAOL;;;;;IAAyC,+CAAS;IAGhD,6BACI,OAAoB,EACpB,OAA6B,EAC7B,MAAc,EACd,QAAkB;QAJtB,YAKE,kBAAM,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAcnE;QArBO,oBAAc,GAAG,IAAI,OAAO,EAAgC,CAAC;QASnE,2FAA2F;QAC3F,mFAAmF;QACnF,KAAI,CAAC,mBAAmB;;;QAAG;YACzB,KAAI,CAAC,cAAc,CAAC,IAAI,eAAoC,CAAC;YAC7D,OAAO,IAAI,CAAC;QACd,CAAC,CAAA,CAAC;QACF,KAAI,CAAC,iBAAiB;;;QAAG;YACvB,KAAI,CAAC,cAAc,CAAC,IAAI,aAAkC,CAAC;YAC3D,OAAO,IAAI,CAAC;QACd,CAAC,CAAA,CAAC;QAEF,KAAI,CAAC,aAAa,EAAE,CAAC;;IACvB,CAAC;;;;IAED,qCAAO;;;IAAP;QACE,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAC5C,CAAC;IACH,0BAAC;AAAD,CAAC,AA3BD,CAAyC,SAAS,GA2BjD;;;;;;;;;;;IA1BC,6CAAqE;;;;;AA6BvE;IAIE,oCACY,QAA8B,EAC9B,OAAe,EACL,SAAc;QAFxB,aAAQ,GAAR,QAAQ,CAAsB;QAC9B,YAAO,GAAP,OAAO,CAAQ;QAGzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;;OAIG;;;;;;IACH,2CAAM;;;;;IAAN,UAAO,OAAoB;QACzB,OAAO,IAAI,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACvF,CAAC;;gBAnBF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;gBA3Cb,oBAAoB;gBAFX,MAAM;gDAoD3B,MAAM,SAAC,QAAQ;;;qCA5DtB;CAyEC,AApBD,IAoBC;SAnBY,0BAA0B;;;;;;IACrC,+CAA4B;;;;;IAGxB,8CAAsC;;;;;IACtC,6CAAuB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, InteractivityChecker} from '@angular/cdk/a11y';\nimport {Observable, Subject} from 'rxjs';\n\n/** Value indicating whether focus left the target area before or after the enclosed elements. */\nexport const enum FocusEscapeNotifierDirection {\n  START,\n  END,\n}\n\n/**\n * Like FocusTrap, but rather than trapping focus within a dom region, notifies subscribers when\n * focus leaves the region.\n */\nexport class FocusEscapeNotifier extends FocusTrap {\n  private _escapeSubject = new Subject<FocusEscapeNotifierDirection>();\n\n  constructor(\n      element: HTMLElement,\n      checker: InteractivityChecker,\n      ngZone: NgZone,\n      document: Document) {\n    super(element, checker, ngZone, document, true /* deferAnchors */);\n\n    // The focus trap adds \"anchors\" at the beginning and end of a trapped region that redirect\n    // focus. We override that redirect behavior here with simply emitting on a stream.\n    this.startAnchorListener = () => {\n      this._escapeSubject.next(FocusEscapeNotifierDirection.START);\n      return true;\n    };\n    this.endAnchorListener = () => {\n      this._escapeSubject.next(FocusEscapeNotifierDirection.END);\n      return true;\n    };\n\n    this.attachAnchors();\n  }\n\n  escapes(): Observable<FocusEscapeNotifierDirection> {\n    return this._escapeSubject.asObservable();\n  }\n}\n\n/** Factory that allows easy instantiation of focus escape notifiers. */\n@Injectable({providedIn: 'root'})\nexport class FocusEscapeNotifierFactory {\n  private _document: Document;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus escape notifier region around the given element.\n   * @param element The element around which focus will be monitored.\n   * @returns The created focus escape notifier instance.\n   */\n  create(element: HTMLElement): FocusEscapeNotifier {\n    return new FocusEscapeNotifier(element, this._checker, this._ngZone, this._document);\n  }\n}\n"]}