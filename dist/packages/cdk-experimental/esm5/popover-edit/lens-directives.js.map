{"version":3,"file":"lens-directives.js","sourceRoot":"","sources":["../../../../../src/cdk-experimental/popover-edit/lens-directives.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReplaySubject} from 'rxjs';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {EDIT_PANE_SELECTOR} from './constants';\nimport {closest} from './polyfill';\nimport {EditRef} from './edit-ref';\n\n/** Options for what do to when the user clicks outside of an edit lens. */\nexport type PopoverEditClickOutBehavior = 'close' | 'submit' | 'noop';\n\n/**\n * A directive that attaches to a form within the edit lens.\n * It coordinates the form state with the table-wide edit system and handles\n * closing the edit lens when the form is submitted or the user clicks\n * out.\n */\n@Directive({\n  selector: 'form[cdkEditControl]',\n  inputs: [\n    'clickOutBehavior: cdkEditControlClickOutBehavior',\n    'preservedFormValue: cdkEditControlPreservedFormValue',\n    'ignoreSubmitUnlessValid: cdkEditControlIgnoreSubmitUnlessValid',\n  ],\n  outputs: ['preservedFormValueChange: cdkEditControlPreservedFormValueChange'],\n  providers: [EditRef],\n})\nexport class CdkEditControl<FormValue> implements OnDestroy, OnInit {\n  protected readonly destroyed = new ReplaySubject<void>();\n\n  /**\n   * Specifies what should happen when the user clicks outside of the edit lens.\n   * The default behavior is to close the lens without submitting the form.\n   */\n  clickOutBehavior: PopoverEditClickOutBehavior = 'close';\n\n  /**\n   * A two-way binding for storing unsubmitted form state. If not provided\n   * then form state will be discarded on close. The PeristBy directive is offered\n   * as a convenient shortcut for these bindings.\n   */\n  preservedFormValue?: FormValue;\n  readonly preservedFormValueChange = new EventEmitter<FormValue>();\n\n  /**\n   * Determines whether the lens will close on form submit if the form is not in a valid\n   * state. By default the lens will remain open.\n   */\n  ignoreSubmitUnlessValid = true;\n\n  constructor(protected readonly elementRef: ElementRef, readonly editRef: EditRef<FormValue>) {}\n\n  ngOnInit(): void {\n    this.editRef.init(this.preservedFormValue);\n    this.editRef.finalValue.subscribe(this.preservedFormValueChange);\n    this.editRef.blurred.subscribe(() => this._handleBlur());\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  /**\n   * Called when the form submits. If ignoreSubmitUnlessValid is true, checks\n   * the form for validity before proceeding.\n   * Updates the revert state with the latest submitted value then closes the edit.\n   */\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('ngSubmit')\n  handleFormSubmit(): void {\n    if (this.ignoreSubmitUnlessValid && !this.editRef.isValid()) { return; }\n\n    this.editRef.updateRevertValue();\n    this.editRef.close();\n  }\n\n  /** Called on Escape keyup. Closes the edit. */\n  close(): void {\n    // todo - allow this behavior to be customized as well, such as calling\n    // reset before close\n    this.editRef.close();\n  }\n\n  /**\n   * Called on click anywhere in the document.\n   * If the click was outside of the lens, trigger the specified click out behavior.\n   */\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('document:click', ['$event'])\n  handlePossibleClickOut(evt: Event): void {\n    if (closest(evt.target, EDIT_PANE_SELECTOR)) { return; }\n    switch (this.clickOutBehavior) {\n      case 'submit':\n        // Manually cause the form to submit before closing.\n        this._triggerFormSubmit();\n        this.editRef.close();\n        break;\n      case 'close':\n        this.editRef.close();\n        break;\n      default:\n        break;\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('keydown', ['$event'])\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.key === 'Escape' && !hasModifierKey(event)) {\n      this.close();\n      event.preventDefault();\n    }\n  }\n\n  /** Triggers submit on tab out if clickOutBehavior is 'submit'. */\n  private _handleBlur(): void {\n    if (this.clickOutBehavior === 'submit') {\n      // Manually cause the form to submit before closing.\n      this._triggerFormSubmit();\n    }\n  }\n\n  private _triggerFormSubmit() {\n    this.elementRef.nativeElement!.dispatchEvent(new Event('submit'));\n  }\n}\n\n/** Reverts the form to its initial or previously submitted state on click. */\n@Directive({\n  selector: 'button[cdkEditRevert]',\n  host: {\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class CdkEditRevert<FormValue> {\n  /** Type of the button. Defaults to `button` to avoid accident form submits. */\n  @Input() type: string = 'button';\n\n  constructor(\n      protected readonly editRef: EditRef<FormValue>) {}\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('click')\n  revertEdit(): void {\n    this.editRef.reset();\n  }\n}\n\n/** Closes the lens on click. */\n@Directive({\n  selector: 'button[cdkEditClose]',\n  host: {\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class CdkEditClose<FormValue> {\n  /** Type of the button. Defaults to `button` to avoid accident form submits. */\n  @Input() type: string = 'button';\n\n  constructor(\n      protected readonly editRef: EditRef<FormValue>) {}\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('click')\n  closeEdit(): void {\n    // Note that we use `click` here, rather than a keyboard event, because some screen readers\n    // will emit a fake click event instead of an enter keyboard event on buttons.\n    this.editRef.close();\n  }\n}\n"]}