{"version":3,"file":"dialog-container.js","sourceRoot":"","sources":["../../../../../src/cdk-experimental/dialog/dialog-container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrapFactory} from '@angular/cdk/a11y';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  HostBinding,\n  Inject,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {DialogConfig} from './dialog-config';\n\n\nexport function throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-dialog-container',\n  templateUrl: './dialog-container.html',\n  styleUrls: ['dialog-container.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    trigger('dialog', [\n      state('enter', style({opacity: 1})),\n      state('exit, void', style({opacity: 0})),\n      transition('* => enter', animate('{{enterAnimationDuration}}')),\n      transition('* => exit, * => void', animate('{{exitAnimationDuration}}')),\n    ])\n  ],\n  host: {\n    '[@dialog]': `{\n      value: _state,\n      params: {\n        enterAnimationDuration: _config.enterAnimationDuration,\n        exitAnimationDuration: _config.exitAnimationDuration\n      }\n    }`,\n    '(@dialog.start)': '_onAnimationStart($event)',\n    '(@dialog.done)': '_animationDone.next($event)',\n  },\n})\nexport class CdkDialogContainer extends BasePortalOutlet implements OnDestroy {\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n   /** The class that traps and manages focus within the dialog. */\n  private _focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n  // @HostBinding is used in the class as it is expected to be extended. Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('attr.aria-label') get _ariaLabel() { return this._config.ariaLabel || null; }\n\n  @HostBinding('attr.aria-describedby')\n  get _ariaDescribedBy() { return this._config.ariaDescribedBy; }\n\n  @HostBinding('attr.role') get _role() { return this._config.role; }\n\n  @HostBinding('attr.aria-modal') _ariaModal = true;\n\n  @HostBinding('attr.tabindex') get _tabindex() { return -1; }\n  // tslint:disable:no-host-decorator-in-concrete\n\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalHost: CdkPortalOutlet;\n\n  /** A subject emitting before the dialog enters the view. */\n  _beforeEnter: Subject<void> = new Subject();\n\n  /** A subject emitting after the dialog enters the view. */\n  _afterEnter: Subject<void> = new Subject();\n\n  /** A subject emitting before the dialog exits the view. */\n  _beforeExit: Subject<void> = new Subject();\n\n  /** A subject emitting after the dialog exits the view. */\n  _afterExit: Subject<void> = new Subject();\n\n  /** Stream of animation `done` events. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: DialogConfig) {\n    super();\n\n    // We use a Subject with a distinctUntilChanged, rather than a callback attached to .done,\n    // because some browsers fire the done event twice and we don't want to emit duplicate events.\n    // See: https://github.com/angular/angular/issues/24084\n    this._animationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // Emit lifecycle events based on animation `done` callback.\n      if (event.toState === 'enter') {\n        this._autoFocusFirstTabbableElement();\n        this._afterEnter.next();\n        this._afterEnter.complete();\n      }\n\n      if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\n        this._returnFocusAfterDialog();\n        this._afterExit.next();\n        this._afterExit.complete();\n      }\n    });\n  }\n\n  /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\n  ngOnDestroy() {\n    this._focusTrap.destroy();\n    this._animationDone.complete();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n\n  /** Emit lifecycle events based on animation `start` callback. */\n  _onAnimationStart(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._beforeEnter.next();\n      this._beforeEnter.complete();\n    }\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\n      this._beforeExit.next();\n      this._beforeExit.complete();\n    }\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExiting(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /**\n   * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\n   * focus the dialog instead.\n   */\n  private _autoFocusFirstTabbableElement() {\n    const element = this._elementRef.nativeElement;\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n        // If we didn't find any focusable elements inside the dialog, focus the\n        // container so the user can't tab into other elements behind it.\n        if (!hasMovedFocus) {\n          element.focus();\n        }\n      });\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Returns the focus to the element focused before the dialog was open. */\n  private _returnFocusAfterDialog() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n  }\n}\n"]}