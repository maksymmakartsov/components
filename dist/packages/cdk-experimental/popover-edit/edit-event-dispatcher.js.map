{"version":3,"file":"edit-event-dispatcher.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/popover-edit/edit-event-dispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,aAAa,EAA4B,UAAU,EAAE,IAAI,EAAE,OAAO,EAAC,MAAM,MAAM,CAAC;AACxF,OAAO,EACL,KAAK,EACL,SAAS,EACT,YAAY,EACZ,oBAAoB,EACpB,MAAM,EACN,GAAG,EACH,KAAK,EACL,IAAI,EACJ,SAAS,GACV,MAAM,gBAAgB,CAAC;AAExB,OAAO,EAAC,aAAa,EAAE,YAAY,EAAC,MAAM,aAAa,CAAC;AACxD,OAAO,EAAC,OAAO,EAAC,MAAM,YAAY,CAAC;;;;;MAI7B,oBAAoB,GAAG,EAAE;;;;;MAGzB,WAAW,GAAG,CAAC;;;IASnB,MAAO;IACP,YAAS;IACT,KAAE;;;;;;AAOJ,MAAM,OAAO,mBAAmB;;;;IA2F9B,YAA6B,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;;;;QAzFnC,YAAO,GAAG,IAAI,OAAO,EAAgB,CAAC;;;;QAGtC,aAAQ,GAAG,IAAI,OAAO,EAAgB,CAAC;;;;QAGvC,YAAO,GAAG,IAAI,OAAO,EAAgB,CAAC;;;;QAGtC,YAAO,GAAG,IAAI,OAAO,EAAY,CAAC;;;;QAGlC,cAAS,GAAG,IAAI,OAAO,EAAgB,CAAC;QAMzC,aAAQ,GAAsB,IAAI,CAAC;;QAG1B,0BAAqB,GAClC,oBAAoB,EAA0C,CAAC;QAClD,mBAAc,GAAG,SAAS,CAAe,IAAI,CAAC,CAAC;QAC/C,mBAAc,GAAG,IAAI,CACpC,mBAAA,IAAI,CAAC,qBAAqB,EAA+C,EACzE,KAAK,EAAE,CACR,CAAC;QACe,2BAAsB,GAAG,IAAI,CAC5C,IAAI,CAAC,cAAc,EACnB,mBAAA,IAAI,CAAC,qBAAqB,EAA0C,CACrE,CAAC;;;;QAGO,qBAAgB,GAAG,aAAa,CAAC;YACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CACb,GAAG;;;;YAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,EAAC,EACxC,IAAI,CAAC,cAAc,CACtB;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;SACzC,CAAC,CAAC,IAAI,CACH,GAAG;;;;QAAC,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,UAAU,IAAI,UAAU,EAAC,EAC3D,mBAAA,IAAI,CAAC,qBAAqB,EAA0C,EACpE,SAAS,CAAC,WAAW,CAAC,EACtB,mBAAA,IAAI,CAAC,qBAAqB,EAA0C,EACpE,KAAK,EAAE,CACV,CAAC;;;;QAGM,0BAAqB,GAAG,IAAI,OAAO,EAAmB,CAAC;;;;QAGvD,sBAAiB,GAAiB,IAAI,CAAC;;;;QAG9B,iCAA4B,GAAG,aAAa,CAAC;YAC1D,IAAI,CAAC,4BAA4B,EAAE;YACnC,IAAI,CAAC,2BAA2B,EAAE;YAClC,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CACd,oBAAoB,EAAE,EACtB,KAAK;;;;YAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAC5B,MAAM;;;;YAAC,YAAY,CAAC,EAAE,CAAC,GAAG,KAAK,YAAY,EAAC,EAC5C,IAAI,CAAC,cAAc,EACnB,YAAY,CAAC,oBAAoB,CAAC,CAAC,EACtC,EACD,IAAI,CAAC,sBAAsB,CAC9B;SACJ,CAAC,CAAC,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EAAE,yDAAyD;QAClE,GAAG,CAAC,wBAAwB,CAAC,EAC7B,oBAAoB,CAAC,kBAAkB,CAAC;QACxC,0EAA0E;QAC1E,2CAA2C;QAC3C,IAAI,CAAC,UAAU,EAAE,EACjB,KAAK,EAAE,CACV,CAAC;QAEe,qBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CACjD,oBAAoB,EAAE,EACtB,IAAI,CAAC,UAAU,EAAE,EACjB,KAAK,EAAE,CACV,CAAC;;;QAIM,iBAAY,GAAiB,IAAI,CAAC;QAClC,6BAAwB,GAAuC,IAAI,CAAC;QAG1E,IAAI,CAAC,gBAAgB,CAAC,SAAS;;;;QAAC,IAAI,CAAC,EAAE;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,CAAC,EAAC,CAAC;IACL,CAAC;;;;;IA9ED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;;;;;;;IAkFD,WAAW,CAAC,OAA4B;;YAClC,IAAI,GAAiB,IAAI;QAE7B,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7B,GAAG;;;;QAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,EAAC,EAChF,mBAAA,IAAI,CAAC,qBAAqB,EAAqC,CAClE,CAAC;IACJ,CAAC;;;;;;;IAMD,eAAe,CAAC,OAA4B;;cACpC,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC;QAE5C,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzB;IACH,CAAC;;;;;;IAGD,gBAAgB,CAAC,GAAiB;QAChC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACtB,CAAC;;;;;;IAGD,kBAAkB,CAAC,GAAiB;QAClC,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE;YACzB,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;;;;;;IAGD,2BAA2B,CAAC,GAAY;QACtC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACtF,CAAC;;;;;;;IAMD,6BAA6B,CAAC,GAAY;;cAClC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;QAEzD,IAAI,QAAQ,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxC;aAAM;YACL,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;SACnD;IACH,CAAC;;;;;;;;IAOD,iBAAiB,CAAC,GAAY;QAC5B,IAAI,GAAG,KAAK,IAAI,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;YACxB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,4BAA4B,CAAC,IAAI,CACpE,GAAG;;;;YAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,eAAyB,EAAC,EACrD,IAAI,CAAC,cAAc,CACpB,CAAC;SACH;QAED,OAAO,mBAAA,IAAI,CAAC,wBAAwB,EAAC,CAAC;IACxC,CAAC;;;;;;;;IAMO,UAAU;QAChB;;;;QAAO,CAAC,MAAqB,EAAE,EAAE,CAC7B,IAAI,UAAU;;;;QAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC;YAC5C,IAAI;;;;YAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG;;;YAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC,CAAA;YAC7D,KAAK;;;;YAAE,CAAC,GAAG,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YACnC,QAAQ;;;YAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;SACpC,CAAC,EAAC,EAAC;IACb,CAAC;;;;;IAEO,4BAA4B;QAClC,OAAO,IAAI,CAAC,sBAAsB;;;;QAAC,IAAI,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,mBAAA,GAAG,EAAW,CAAC,EAAE;oBAClD,OAAO,mBAAA,GAAG,EAAW,CAAC;iBACvB;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC,EAAC,CAAC;IACL,CAAC;;;;;IAEO,2BAA2B;QACjC,OAAO,IAAI,CAAC,sBAAsB;;;;QAAC,IAAI,CAAC,EAAE;YACxC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrD,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,mBAAA,GAAG,EAAW,CAAC,EAAE;oBAClD,OAAO,mBAAA,GAAG,EAAW,CAAC;iBACvB;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC,EAAC,CAAC;IACL,CAAC;;;;;;IAEO,sBAAsB,CAAC,MAAwC;QAErE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACpB,GAAG,CAAC,MAAM,CAAC,EACX,IAAI,CAAC,sBAAsB,CAC9B,CAAC;IACJ,CAAC;;;YAtNF,UAAU;;;;YAvCS,MAAM;;;;;;;IA0CxB,sCAA+C;;;;;IAG/C,uCAAgD;;;;;IAGhD,sCAA+C;;;;;IAG/C,sCAA2C;;;;;IAG3C,wCAAiD;;;;;IAMjD,uCAA2C;;;;;IAG3C,oDACmE;;;;;IACnE,6CAAgE;;;;;IAChE,6CAGE;;;;;IACF,qDAGE;;;;;IAGF,+CAYE;;;;;;IAGF,oDAA+D;;;;;;IAG/D,gDAA+C;;;;;;IAG/C,2DAqBE;;;;;IAEF,+CAIE;;;;;IAIF,2CAA0C;;;;;IAC1C,uDAA4E;;;;;IAEhE,sCAAgC;;;;;;AA6H9C,SAAS,wBAAwB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAsB;;UAEvF,iBAAiB,GAAG,IAAI,GAAG,EAA8B;IAE/D,sBAAsB;IACtB,KAAK,MAAM,aAAa,IAAI;QAC1B,QAAQ;QACR,OAAO;QACP,SAAS,IAAI,SAAS,CAAC,sBAAsB;QAC7C,SAAS,IAAI,SAAS,CAAC,kBAAkB;KAC1C,EAAE;QACD,IAAI,aAAa,EAAE;YACjB,iBAAiB,CAAC,GAAG,CAAC,mBAAA,aAAa,EAAW,oBAA8B,CAAC;SAC9E;KACF;IAED,yCAAyC;IACzC,KAAK,MAAM,KAAK,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE;QACzC,IAAI,KAAK,EAAE;YACT,iBAAiB,CAAC,GAAG,CAAC,KAAK,aAAuB,CAAC;SACpD;KACF;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC;;;;;;;AAED,SAAS,kBAAkB,CAAO,CAAY,EAAE,CAAY;IAC1D,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;QACrB,OAAO,KAAK,CAAC;KACd;IAED,uDAAuD;IACvD,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;QACvC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core';\nimport {combineLatest, MonoTypeOperatorFunction, Observable, pipe, Subject} from 'rxjs';\nimport {\n  audit,\n  auditTime,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  share,\n  skip,\n  startWith,\n} from 'rxjs/operators';\n\nimport {CELL_SELECTOR, ROW_SELECTOR} from './constants';\nimport {closest} from './polyfill';\nimport {EditRef} from './edit-ref';\n\n/** The delay applied to mouse events before hiding or showing hover content. */\nconst MOUSE_EVENT_DELAY_MS = 40;\n\n/** The delay for reacting to focus/blur changes. */\nconst FOCUS_DELAY = 0;\n\n/**\n * The possible states for hover content:\n * OFF - Not rendered.\n * FOCUSABLE - Rendered in the dom and stylyed for its contents to be focusable but invisible.\n * ON - Rendered and fully visible.\n */\nexport const enum HoverContentState {\n  OFF = 0,\n  FOCUSABLE,\n  ON,\n}\n\n/**\n * Service for sharing delegated events and state for triggering table edits.\n */\n@Injectable()\nexport class EditEventDispatcher {\n  /** A subject that indicates which table cell is currently editing. */\n  readonly editing = new Subject<Element|null>();\n\n  /** A subject that indicates which table row is currently hovered. */\n  readonly hovering = new Subject<Element|null>();\n\n  /** A subject that indicates which table row currently contains focus. */\n  readonly focused = new Subject<Element|null>();\n\n  /** A subject that indicates all elements in the table matching ROW_SELECTOR. */\n  readonly allRows = new Subject<NodeList>();\n\n  /** A subject that emits mouse move events from the table indicating the targeted row. */\n  readonly mouseMove = new Subject<Element|null>();\n\n  /** The EditRef for the currently active edit lens (if any). */\n  get editRef(): EditRef<any>|null {\n    return this._editRef;\n  }\n  private _editRef: EditRef<any>|null = null;\n\n  // Optimization: Precompute common pipeable operators used per row/cell.\n  private readonly _distinctUntilChanged =\n      distinctUntilChanged<Element|HoverContentState|boolean|null>();\n  private readonly _startWithNull = startWith<Element|null>(null);\n  private readonly _distinctShare = pipe(\n    this._distinctUntilChanged as MonoTypeOperatorFunction<HoverContentState>,\n    share(),\n  );\n  private readonly _startWithNullDistinct = pipe(\n    this._startWithNull,\n    this._distinctUntilChanged as MonoTypeOperatorFunction<Element|null>,\n  );\n\n  /** An observable that emits the row containing focus or an active edit. */\n  readonly editingOrFocused = combineLatest([\n      this.editing.pipe(\n          map(cell => closest(cell, ROW_SELECTOR)),\n          this._startWithNull,\n      ),\n      this.focused.pipe(this._startWithNull),\n  ]).pipe(\n      map(([editingRow, focusedRow]) => focusedRow || editingRow),\n      this._distinctUntilChanged as MonoTypeOperatorFunction<Element|null>,\n      auditTime(FOCUS_DELAY), // Use audit to skip over blur events to the next focused element.\n      this._distinctUntilChanged as MonoTypeOperatorFunction<Element|null>,\n      share(),\n  );\n\n  /** Tracks rows that contain hover content with a reference count. */\n  private _rowsWithHoverContent = new WeakMap<Element, number>();\n\n  /** The table cell that has an active edit lens (or null). */\n  private _currentlyEditing: Element|null = null;\n\n  /** The combined set of row hover content states organized by row. */\n  private readonly _hoveredContentStateDistinct = combineLatest([\n      this._getFirstRowWithHoverContent(),\n      this._getLastRowWithHoverContent(),\n      this.editingOrFocused,\n      this.hovering.pipe(\n          distinctUntilChanged(),\n          audit(row => this.mouseMove.pipe(\n              filter(mouseMoveRow => row === mouseMoveRow),\n              this._startWithNull,\n              debounceTime(MOUSE_EVENT_DELAY_MS)),\n          ),\n          this._startWithNullDistinct,\n      ),\n  ]).pipe(\n      skip(1), // Skip the initial emission of [null, null, null, null].\n      map(computeHoverContentState),\n      distinctUntilChanged(areMapEntriesEqual),\n      // Optimization: Enter the zone before share() so that we trigger a single\n      // ApplicationRef.tick for all row updates.\n      this._enterZone(),\n      share(),\n  );\n\n  private readonly _editingDistinct = this.editing.pipe(\n      distinctUntilChanged(),\n      this._enterZone(),\n      share(),\n  );\n\n  // Optimization: Share row events observable with subsequent callers.\n  // At startup, calls will be sequential by row.\n  private _lastSeenRow: Element|null = null;\n  private _lastSeenRowHoverOrFocus: Observable<HoverContentState>|null = null;\n\n  constructor(private readonly _ngZone: NgZone) {\n    this._editingDistinct.subscribe(cell => {\n      this._currentlyEditing = cell;\n    });\n  }\n\n  /**\n   * Gets an Observable that emits true when the specified element's cell\n   * is editing and false when not.\n   */\n  editingCell(element: Element|EventTarget): Observable<boolean> {\n    let cell: Element|null = null;\n\n    return this._editingDistinct.pipe(\n        map(editCell => editCell === (cell || (cell = closest(element, CELL_SELECTOR)))),\n        this._distinctUntilChanged as MonoTypeOperatorFunction<boolean>,\n    );\n  }\n\n  /**\n   * Stops editing for the specified cell. If the specified cell is not the current\n   * edit cell, does nothing.\n   */\n  doneEditingCell(element: Element|EventTarget): void {\n    const cell = closest(element, CELL_SELECTOR);\n\n    if (this._currentlyEditing === cell) {\n      this.editing.next(null);\n    }\n  }\n\n  /** Sets the currently active EditRef. */\n  setActiveEditRef(ref: EditRef<any>) {\n    this._editRef = ref;\n  }\n\n  /** Unsets the currently active EditRef, if the specified editRef is active. */\n  unsetActiveEditRef(ref: EditRef<any>) {\n    if (this._editRef !== ref) {\n      return;\n    }\n\n    this._editRef = null;\n  }\n\n  /** Adds the specified table row to be tracked for first/last row comparisons. */\n  registerRowWithHoverContent(row: Element): void {\n    this._rowsWithHoverContent.set(row, (this._rowsWithHoverContent.get(row) || 0) + 1);\n  }\n\n  /**\n   * Reference decrements and ultimately removes the specified table row from first/last row\n   * comparisons.\n   */\n  deregisterRowWithHoverContent(row: Element): void {\n    const refCount = this._rowsWithHoverContent.get(row) || 0;\n\n    if (refCount <= 1) {\n      this._rowsWithHoverContent.delete(row);\n    } else {\n      this._rowsWithHoverContent.set(row, refCount - 1);\n    }\n  }\n\n  /**\n   * Gets an Observable that emits true when the specified element's row\n   * contains the focused element or is being hovered over and false when not.\n   * Hovering is defined as when the mouse has momentarily stopped moving over the cell.\n   */\n  hoverOrFocusOnRow(row: Element): Observable<HoverContentState> {\n    if (row !== this._lastSeenRow) {\n      this._lastSeenRow = row;\n      this._lastSeenRowHoverOrFocus = this._hoveredContentStateDistinct.pipe(\n        map(state => state.get(row) || HoverContentState.OFF),\n        this._distinctShare,\n      );\n    }\n\n    return this._lastSeenRowHoverOrFocus!;\n  }\n\n  /**\n   * RxJS operator that enters the Angular zone, used to reduce boilerplate in\n   * re-entering the zone for stream pipelines.\n   */\n  private _enterZone<T>(): MonoTypeOperatorFunction<T> {\n    return (source: Observable<T>) =>\n        new Observable<T>((observer) => source.subscribe({\n             next: (value) => this._ngZone.run(() => observer.next(value)),\n             error: (err) => observer.error(err),\n             complete: () => observer.complete()\n           }));\n  }\n\n  private _getFirstRowWithHoverContent(): Observable<Element|null> {\n    return this._mapAllRowsToSingleRow(rows => {\n      for (let i = 0, row; row = rows[i]; i++) {\n        if (this._rowsWithHoverContent.has(row as Element)) {\n          return row as Element;\n        }\n      }\n      return null;\n    });\n  }\n\n  private _getLastRowWithHoverContent(): Observable<Element|null> {\n    return this._mapAllRowsToSingleRow(rows => {\n      for (let i = rows.length - 1, row; row = rows[i]; i--) {\n        if (this._rowsWithHoverContent.has(row as Element)) {\n          return row as Element;\n        }\n      }\n      return null;\n    });\n  }\n\n  private _mapAllRowsToSingleRow(mapper: (rows: NodeList) => Element|null):\n      Observable<Element|null> {\n    return this.allRows.pipe(\n        map(mapper),\n        this._startWithNullDistinct,\n    );\n  }\n}\n\nfunction computeHoverContentState([firstRow, lastRow, activeRow, hoverRow]: Array<Element|null>):\n     Map<Element, HoverContentState> {\n  const hoverContentState = new Map<Element, HoverContentState>();\n\n  // Add focusable rows.\n  for (const focussableRow of [\n    firstRow,\n    lastRow,\n    activeRow && activeRow.previousElementSibling,\n    activeRow && activeRow.nextElementSibling,\n  ]) {\n    if (focussableRow) {\n      hoverContentState.set(focussableRow as Element, HoverContentState.FOCUSABLE);\n    }\n  }\n\n  // Add/overwrite with fully visible rows.\n  for (const onRow of [activeRow, hoverRow]) {\n    if (onRow) {\n      hoverContentState.set(onRow, HoverContentState.ON);\n    }\n  }\n\n  return hoverContentState;\n}\n\nfunction areMapEntriesEqual<K, V>(a: Map<K, V>, b: Map<K, V>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  // TODO: use Map.prototype.entries once we're off IE11.\n  for (const aKey of Array.from(a.keys())) {\n    if (b.get(aKey) !== a.get(aKey)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"]}