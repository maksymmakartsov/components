{"version":3,"file":"focus-dispatcher.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/popover-edit/focus-dispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {Injectable} from '@angular/core';\nimport {PartialObserver} from 'rxjs';\n\nimport {EDITABLE_CELL_SELECTOR, ROW_SELECTOR, TABLE_SELECTOR} from './constants';\nimport {closest} from './polyfill';\n\n/**\n * Service responsible for moving cell focus around in response to keyboard events.\n * May be overridden to customize the keyboard behavior of popover edit.\n */\n@Injectable({providedIn: 'root'})\nexport class FocusDispatcher {\n  /** Observes keydown events triggered from the table. */\n  readonly keyObserver: PartialObserver<KeyboardEvent>;\n\n  constructor(protected readonly directionality: Directionality) {\n    this.keyObserver = {next: (event) => this.handleKeyboardEvent(event)};\n  }\n\n  /**\n   * Moves focus to earlier or later cells (in dom order) by offset cells relative to\n   * currentCell.\n   */\n  moveFocusHorizontally(currentCell: HTMLElement, offset: number): void {\n    const cells = Array.from(closest(currentCell, TABLE_SELECTOR)!.querySelectorAll(\n                      EDITABLE_CELL_SELECTOR)) as HTMLElement[];\n    const currentIndex = cells.indexOf(currentCell);\n    const newIndex = currentIndex + offset;\n\n    if (cells[newIndex]) {\n      cells[newIndex].focus();\n    }\n  }\n\n  /** Moves focus to up or down by row by offset cells relative to currentCell. */\n  moveFocusVertically(currentCell: HTMLElement, offset: number): void {\n    const currentRow = closest(currentCell, ROW_SELECTOR)!;\n    const rows = Array.from(closest(currentRow, TABLE_SELECTOR)!.querySelectorAll(ROW_SELECTOR));\n    const currentRowIndex = rows.indexOf(currentRow);\n    const currentIndexWithinRow =\n        Array.from(currentRow.querySelectorAll(EDITABLE_CELL_SELECTOR)).indexOf(currentCell);\n    const newRowIndex = currentRowIndex + offset;\n\n    if (rows[newRowIndex]) {\n      const rowToFocus =\n          Array.from(rows[newRowIndex].querySelectorAll(EDITABLE_CELL_SELECTOR)) as HTMLElement[];\n\n      if (rowToFocus[currentIndexWithinRow]) {\n        rowToFocus[currentIndexWithinRow].focus();\n      }\n    }\n  }\n\n  /** Translates arrow keydown events into focus move operations. */\n  protected handleKeyboardEvent(event: KeyboardEvent): void {\n    const cell = closest(event.target, EDITABLE_CELL_SELECTOR) as HTMLElement | null;\n\n    if (!cell) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case UP_ARROW:\n        this.moveFocusVertically(cell, -1);\n        break;\n      case DOWN_ARROW:\n        this.moveFocusVertically(cell, 1);\n        break;\n      case LEFT_ARROW:\n        this.moveFocusHorizontally(cell, this.directionality.value === 'ltr' ? -1 : 1);\n        break;\n      case RIGHT_ARROW:\n        this.moveFocusHorizontally(cell, this.directionality.value === 'ltr' ? 1 : -1);\n        break;\n      default:\n        // If the keyboard event is not handled, return now so that we don't `preventDefault`.\n        return;\n    }\n\n    event.preventDefault();\n  }\n}\n"]}