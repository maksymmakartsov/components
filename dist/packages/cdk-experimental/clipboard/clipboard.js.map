{"version":3,"file":"clipboard.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/clipboard/clipboard.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;;;;;;;;;;AAUjD,MAAM,OAAO,SAAS;;;;IAGpB,YAA8B,QAAa;QACzC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;;;;;;;IAQD,IAAI,CAAC,IAAY;;cACT,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;;cAClC,UAAU,GAAG,WAAW,CAAC,IAAI,EAAE;QACrC,WAAW,CAAC,OAAO,EAAE,CAAC;QAEtB,OAAO,UAAU,CAAC;IACpB,CAAC;;;;;;;;;;IAWD,SAAS,CAAC,IAAY;QACpB,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;;;YAjCF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;4CAIjB,MAAM,SAAC,QAAQ;;;;;;;;IAF5B,8BAA4B;;;;;;;;;;;;;;;AA+C9B,MAAM,OAAO,WAAW;;;;;IAGtB,YAAY,IAAY,EAAmB,SAAmB;QAAnB,cAAS,GAAT,SAAS,CAAU;;cACtD,QAAQ,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC;;cACpE,MAAM,GAAG,QAAQ,CAAC,KAAK;QAE7B,yDAAyD;QACzD,uDAAuD;QACvD,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;QACrB,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC7B,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpC,QAAQ,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAC7C,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;;;;;IAGD,IAAI;;cACI,QAAQ,GAAG,IAAI,CAAC,SAAS;;YAC3B,UAAU,GAAG,KAAK;QAEtB,IAAI,EAAG,uDAAuD;YAC5D,IAAI,QAAQ,EAAE;;sBACN,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa;gBAEjD,QAAQ,CAAC,MAAM,EAAE,CAAC;gBAClB,QAAQ,CAAC,iBAAiB,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACrD,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAEhD,IAAI,YAAY,IAAI,YAAY,YAAY,WAAW,EAAE;oBACvD,YAAY,CAAC,KAAK,EAAE,CAAC;iBACtB;aACF;SACF;QAAC,WAAM;YACN,iBAAiB;YACjB,qEAAqE;SACtE;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;;;;;IAGD,OAAO;;cACC,QAAQ,GAAG,IAAI,CAAC,SAAS;QAE/B,IAAI,QAAQ,EAAE;YACZ,IAAI,QAAQ,CAAC,UAAU,EAAE;gBACvB,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC5B;IACH,CAAC;CACF;;;;;;IArDC,gCAAiD;;;;;IAEvB,gCAAoC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * A service for copying text to the clipboard.\n *\n * Example usage:\n *\n * clipboard.copy(\"copy this text\");\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus && currentFocus instanceof HTMLElement) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n"]}