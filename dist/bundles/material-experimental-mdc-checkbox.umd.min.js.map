{"version":3,"file":"material-experimental-mdc-checkbox.umd.min.js","sources":["../../src/material-experimental/mdc-checkbox/checkbox.ts","../../src/material-experimental/mdc-checkbox/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from '@angular/material/checkbox';\nimport {ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCCheckboxAdapter, MDCCheckboxFoundation} from '@material/checkbox';\nimport {numbers} from '@material/ripple';\n\nlet nextUniqueId = 0;\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[id]': 'id',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  /**\n   * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** The `aria-labelledby` attribute to use for the input element. */\n  @Input('aria-labelledby') ariaLabelledby: string|null = null;\n\n  /** The color palette  for this checkbox ('primary', 'accent', or 'warn'). */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n  @Input() labelPosition: 'before'|'after' = 'after';\n\n  /** The `name` attribute to use for the input element. */\n  @Input() name: string|null = null;\n\n  /** The `tabindex` attribute to use for the input element. */\n  @Input() tabIndex: number;\n\n  /** The `value` attribute to use for the input element */\n  @Input() value: string;\n\n  private _uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(checked) {\n    this._checked = coerceBooleanProperty(checked);\n  }\n  private _checked = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(indeterminate) {\n    this._indeterminate = coerceBooleanProperty(indeterminate);\n  }\n  private _indeterminate = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(required) {\n    this._required = coerceBooleanProperty(required);\n  }\n  private _required = false;\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output()\n  readonly change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The root element for the `MDCCheckbox`. */\n  @ViewChild('checkbox', {static: false}) _checkbox: ElementRef<HTMLElement>;\n\n  /** The native input element. */\n  @ViewChild('nativeCheckbox', {static: false}) _nativeCheckbox: ElementRef<HTMLInputElement>;\n\n  /** The native label element. */\n  @ViewChild('label', {static: false}) _label: ElementRef<HTMLElement>;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** The `MDCCheckboxFoundation` instance for this checkbox. */\n  _checkboxFoundation: MDCCheckboxFoundation;\n\n  /** The set of classes that should be applied to the native input. */\n  _classes: {[key: string]: boolean} = {'mdc-checkbox__native-control': true};\n\n  /** Animation config for the ripple. */\n  _rippleAnimation = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS,\n  };\n\n  /** ControlValueAccessor onChange */\n  private _cvaOnChange = (_: boolean) => {};\n\n  /** ControlValueAccessor onTouch */\n  private _cvaOnTouch = () => {};\n\n  /**\n   * A list of attributes that should not be modified by `MDCFoundation` classes.\n   *\n   * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n   * Therefore we disable it and handle it ourselves.\n   */\n  private _attrBlacklist = new Set(['aria-checked']);\n\n  /** The `MDCCheckboxAdapter` instance for this checkbox. */\n  private _checkboxAdapter: MDCCheckboxAdapter = {\n    addClass: (className) => this._setClass(className, true),\n    removeClass: (className) => this._setClass(className, false),\n    forceLayout: () => this._platform.isBrowser && this._checkbox.nativeElement.offsetWidth,\n    hasNativeControl: () => !!this._nativeCheckbox,\n    isAttachedToDOM: () => !!this._checkbox.nativeElement.parentNode,\n    isChecked: () => this.checked,\n    isIndeterminate: () => this.indeterminate,\n    removeNativeControlAttr:\n        (attr) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.removeAttribute(attr);\n          }\n        },\n    setNativeControlAttr:\n        (attr, value) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n          }\n        },\n    setNativeControlDisabled: (disabled) => this.disabled = disabled,\n  };\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      private _platform: Platform,\n      @Attribute('tabindex') tabIndex: string,\n      @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION) private _clickAction: MatCheckboxClickAction,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._checkboxFoundation = new MDCCheckboxFoundation(this._checkboxAdapter);\n    // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n    // ripple, which we do ourselves instead.\n  }\n\n  ngAfterViewInit() {\n    this._checkboxFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this._checkboxFoundation.destroy();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnChange(fn: (checked: boolean) => void) {\n    this._cvaOnChange = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void) {\n    this._cvaOnTouch = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._nativeCheckbox.nativeElement.focus();\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle() {\n    this.checked = !this.checked;\n    this._cvaOnChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._cvaOnTouch();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Handles click events on the native input.\n   *\n   * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n   * not actually change the checked state when the user clicks an indeterminate checkbox. By\n   * listening to `click` instead we can override and normalize the behavior to change the checked\n   * state like other browsers do.\n   */\n  _onClick() {\n    if (this._clickAction === 'noop') {\n      this._nativeCheckbox.nativeElement.checked = this.checked;\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n      return;\n    }\n\n    if (this.indeterminate && this._clickAction !== 'check') {\n      this.indeterminate = false;\n      // tslint:disable:max-line-length\n      // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n      // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n      // tslint:enable:max-line-length\n      Promise.resolve().then(() => this.indeterminateChange.next(this.indeterminate));\n    } else {\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n    }\n\n    this.checked = !this.checked;\n    this._checkboxFoundation.handleChange();\n\n    // Dispatch our change event\n    const newEvent = new MatCheckboxChange();\n    newEvent.source = this as any;\n    newEvent.checked = this.checked;\n    this._cvaOnChange(this.checked);\n    this.change.next(newEvent);\n  }\n\n  /** Gets the value for the `aria-checked` attribute of the native input. */\n  _getAriaChecked(): 'true'|'false'|'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  /** Sets whether the given CSS class should be applied to the native input. */\n  private _setClass(cssClass: string, active: boolean) {\n    this._classes[cssClass] = active;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {_MatCheckboxRequiredValidatorModule} from '@angular/material/checkbox';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, CommonModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n"],"names":["nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","_changeDetectorRef","_platform","tabIndex","_clickAction","_animationMode","_this","this","ariaLabel","ariaLabelledby","color","labelPosition","name","_uniqueId","id","_checked","_indeterminate","_disabled","_required","_disableRipple","change","EventEmitter","indeterminateChange","_classes","mdc-checkbox__native-control","_rippleAnimation","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","_cvaOnChange","_","_cvaOnTouch","_attrBlacklist","Set","_checkboxAdapter","addClass","className","_setClass","removeClass","forceLayout","isBrowser","_checkbox","nativeElement","offsetWidth","hasNativeControl","_nativeCheckbox","isAttachedToDOM","parentNode","isChecked","checked","isIndeterminate","indeterminate","removeNativeControlAttr","attr","has","removeAttribute","setNativeControlAttr","value","setAttribute","setNativeControlDisabled","disabled","parseInt","_checkboxFoundation","MDCCheckboxFoundation","Object","defineProperty","prototype","coerceBooleanProperty","required","disableRipple","ngAfterViewInit","init","ngOnDestroy","destroy","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","markForCheck","writeValue","focus","toggle","_onBlur","Promise","resolve","then","_onClick","next","handleChange","newEvent","source","_getAriaChecked","cssClass","active","type","Component","args","selector","template","styles","host","class","[attr.tabindex]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class._mat-animation-noopable]","[id]","providers","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","String","decorators","Attribute","undefined","Optional","Inject","MAT_CHECKBOX_CLICK_ACTION","ANIMATION_MODULE_TYPE","propDecorators","Input","Output","ViewChild","static","_label","MatCheckboxModule","NgModule","imports","MatCommonModule","MatRippleModule","CommonModule","_MatCheckboxRequiredValidatorModule","exports","declarations"],"mappings":"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"}