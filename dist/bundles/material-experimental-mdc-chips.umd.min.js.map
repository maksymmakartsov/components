{"version":3,"file":"material-experimental-mdc-chips.umd.min.js","sources":["../../src/material-experimental/mdc-chips/chip-grid.ts","../../src/material-experimental/mdc-chips/chip-default-options.ts","../../src/material-experimental/mdc-chips/chip-input.ts","../../src/material-experimental/mdc-chips/module.ts","../../src/material-experimental/mdc-chips/chip-set.ts","../../src/material-experimental/mdc-chips/chip-listbox.ts","../../src/material-experimental/mdc-chips/grid-focus-key-manager.ts","../../node_modules/tslib/tslib.es6.js","../../src/material-experimental/mdc-chips/chip-icons.ts","../../src/material-experimental/mdc-chips/chip.ts","../../src/material-experimental/mdc-chips/chip-option.ts","../../src/material-experimental/mdc-chips/grid-key-manager.ts","../../src/material-experimental/mdc-chips/chip-row.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {MatChipTextControl} from './chip-text-control';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {GridFocusKeyManager} from './grid-focus-key-manager';\n\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              _dir: Directionality,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir);\n  }\n}\nconst _MatChipGridMixinBase: CanUpdateErrorStateCtor & typeof MatChipGridBase =\n    mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-grid',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid extends _MatChipGridMixinBase implements AfterContentInit, AfterViewInit,\n  CanUpdateErrorState, ControlValueAccessor, DoCheck, MatFormFieldControl<any>, OnDestroy {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The GridFocusKeyManager which handles focus. */\n  _keyManager: GridFocusKeyManager;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string { return this._chipInput.id; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean { return this._chipInput.empty && this._chips.length === 0; }\n\n    /** The ARIA role applied to the chip grid. */\n  get role(): string | null { return this.empty ? null : 'grid'; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  get focused(): boolean { return this._chipInput.focused || this._hasFocusedChip(); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n      new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipRow>;\n\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm,\n        _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (!this._chipInput) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._setMdcClass('mdc-chip-set--input', true);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event) && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (this._chips.length > 0) {\n      this._keyManager.setFirstCellActive();\n    } else {\n      this._focusInput();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    // Check whether the focus moved to chip input.\n    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n    // to chip input, do nothing.\n    // Timeout is needed to wait for the focus() event trigger on chip input.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._keyManager.setActiveCell({row: -1, column: -1});\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._chipInput.focused) {\n      return;\n    }\n\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isEmptyInput(target)) {\n      if (this._chips.length) {\n        this._keyManager.setLastCellActive();\n      }\n      event.preventDefault();\n    } else if (event.keyCode === TAB && target.id !== this._chipInput!.id ) {\n      this._allowFocusEscape();\n    } else if (this._originatesFromChip(event)) {\n      this._keyManager.onKeydown(event);\n    }\n    this.stateChanges.next();\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new GridFocusKeyManager(this._chips)\n      .withDirectionality(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withDirectionality(dir));\n    }\n  }\n\n   /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipRow);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveCell({row: chipIndex, column: 0});\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(\n      chip => chip.value) : fallbackValue;\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * If the amount of chips changed, we need to focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveCell({\n          row: newChipIndex,\n          column: this._keyManager.activeColumnIndex\n        });\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /** Focus input element. */\n  private _focusInput() {\n    this._chipInput.focus();\n  }\n\n  /** Returns true if element is an input with no value. */\n  private _isEmptyInput(element: HTMLElement): boolean {\n    if (element && element.id === this._chipInput!.id) {\n      return this._chipInput.empty;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-mdc-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipGrid: MatChipGrid;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipGrid && this._chipGrid.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipGrid._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipGrid._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher, MatCommonModule} from '@angular/material/core';\nimport {MatChip, MatChipCssInternalOnly} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipCssInternalOnly,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {HasTabIndex, HasTabIndexCtor, mixinTabIndex} from '@angular/material/core';\nimport {MDCChipSetAdapter, MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\n\n\nlet uid = 0;\n\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nclass MatChipSetBase {\n  disabled!: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase: HasTabIndexCtor & typeof MatChipSetBase =\n    mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-set',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-chip-set',\n    '[attr.role]': 'role',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[id]': '_uid',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet extends _MatChipSetMixinBase implements AfterContentInit, AfterViewInit,\n  HasTabIndex, OnDestroy {\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** Subscription to destroyed events in chips. */\n  private _chipDestroyedSubscription: Subscription | null;\n\n  /** Subscription to chip interactions. */\n  private _chipInteractionSubscription: Subscription | null;\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  protected _lastDestroyedChipIndex: number | null = null;\n\n  /** The MDC foundation containing business logic for MDC chip-set. */\n  protected _chipSetFoundation: MDCChipSetFoundation;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /**\n   * Implementation of the MDC chip-set adapter interface.\n   * These methods are called by the chip set foundation.\n   */\n  protected _chipSetAdapter: MDCChipSetAdapter = {\n    hasClass: (className) => this._hasMdcClass(className),\n    // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n    // removed.\n    removeChipAtIndex: () => {},\n    // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n    selectChipAtIndex: () => {},\n    getIndexOfChipById: (id: string) => this._chips.toArray().findIndex(chip => chip.id === id),\n    focusChipPrimaryActionAtIndex: () => {},\n    focusChipTrailingActionAtIndex: () => {},\n    removeFocusFromChipAtIndex: () => {},\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    getChipListCount: () => this._chips.length,\n  };\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Uid of the chip set */\n  _uid: string = `mat-mdc-chip-set-${uid++}`;\n\n  /**\n   * Map from class to whether the class is enabled.\n   * Enabled classes are set on the MDC chip-set div.\n   */\n  _mdcClasses: {[key: string]: boolean} = {};\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean { return this._chips.length === 0; }\n\n  /** The ARIA role applied to the chip set. */\n  get role(): string | null { return this.empty ? null : 'presentation'; }\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean { return this._hasFocusedChip(); }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.removed));\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.destroyed));\n  }\n\n  /** Combined stream of all of the child chips' interaction events. */\n  get chipInteractionChanges(): Observable<string> {\n    return merge(...this._chips.map(chip => chip.interaction));\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip) _chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              @Optional() protected _dir: Directionality) {\n    super(_elementRef);\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n  }\n\n  ngAfterViewInit() {\n    this._chipSetFoundation.init();\n  }\n\n  ngAfterContentInit() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipSetFoundation.destroy();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  protected _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Adapter method that returns true if the chip set has the given MDC class. */\n  protected _hasMdcClass(className: string) {\n    return this._elementRef.nativeElement.classList.contains(className);\n  }\n\n  /** Updates subscriptions to chip events. */\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._subscribeToChipEvents();\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    this._listenToChipsRemove();\n    this._listenToChipsDestroyed();\n    this._listenToChipsInteraction();\n  }\n\n  /** Subscribes to chip removal events. */\n  private _listenToChipsRemove() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event: MatChipEvent) => {\n       this._chipSetFoundation.handleChipRemoval(event.chip.id);\n    });\n  }\n\n  /** Subscribes to chip destroyed events. */\n  private _listenToChipsDestroyed() {\n    this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe((event: MatChipEvent) => {\n      const chip = event.chip;\n      const chipIndex: number = this._chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Subscribes to chip interaction events. */\n  private _listenToChipsInteraction() {\n    this._chipInteractionSubscription = this.chipInteractionChanges.subscribe((id: string) => {\n      this._chipSetFoundation.handleChipInteraction(id);\n    });\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n\n    if (this._chipInteractionSubscription) {\n      this._chipInteractionSubscription.unsubscribe();\n      this._chipInteractionSubscription = null;\n    }\n\n    if (this._chipDestroyedSubscription) {\n      this._chipDestroyedSubscription.unsubscribe();\n      this._chipDestroyedSubscription = null;\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mdc-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-listbox',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox extends MatChipSet implements AfterContentInit, ControlValueAccessor {\n\n  /** Subscription to selection changes in the chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The ARIA role applied to the chip listbox. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption  {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    this._initializeSelection();\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this._chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n      new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipOption>;\n\n  constructor(protected _elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality) {\n    super(_elementRef, _changeDetectorRef, _dir);\n    this._chipSetAdapter.selectChipAtIndex = (index: number, selected: boolean) => {\n      this._setSelected(index, selected);\n    };\n    // Reinitialize the foundation with our overridden adapter\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n    this._updateMdcSelectionClasses();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip) {\n      const firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n      this._keyManager.setActiveItem(firstSelectedChipIndex);\n    } else if (this._chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /** Selects or deselects a chip by id. */\n  _setSelected(index: number, selected: boolean) {\n    const chip = this._chips.toArray()[index];\n    if (chip && chip.selected != selected) {\n      chip.toggleSelected(true);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this.focused) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    // Wait to see if focus moves to an indivdual chip.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n   */\n  _keydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the chip listbox selection state to reflect any chips that were preselected.\n   */\n  private _initializeSelection() {\n    setTimeout(() => {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      this._chips.forEach(chip => {\n        if (chip.selected) {\n          this._chipSetFoundation.select(chip.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Sets the mdc classes for single vs multi selection. */\n  private _updateMdcSelectionClasses() {\n    this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n    this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatChip>(this._chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsSelection();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipOption);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n    });\n  }\n\n  /** Subscribes to selection changes in the option chips. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n      (chipSelectionChange: MatChipSelectionChange) => {\n        this._chipSetFoundation.handleChipSelection(\n          chipSelectionChange.source.id, chipSelectionChange.selected, false);\n        if (chipSelectionChange.isUserInput) {\n          this._propagateChanges();\n        }\n    });\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GridKeyManager} from './grid-key-manager';\n\n/**\n * A version of GridKeyManager where the cells are HTMLElements, and focus()\n * is called on a cell when it becomes active.\n */\nexport class GridFocusKeyManager extends GridKeyManager<HTMLElement> {\n  /**\n   * Sets the active cell to the cell at the specified\n   * indices and focuses the newly active cell.\n   * @param cell Row and column indices of the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell that is specified and focuses it.\n   * @param cell Cell to be set as active.\n   */\n  setActiveCell(cell: HTMLElement): void;\n\n  setActiveCell(cell: any): void {\n    super.setActiveCell(cell);\n\n    if (this.activeCell) {\n      this.activeCell.focus();\n    }\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * Directive to add CSS classes to chip leading icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-chip__icon mdc-chip__icon--leading',\n    'role': 'img'\n  }\n})\nexport class MatChipAvatar {\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Sets whether the given CSS class should be applied to the leading icon. */\n  setClass(cssClass: string, active: boolean) {\n    this._elementRef.nativeElement.classList.toggle(cssClass, active);\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Directive to add CSS classes to and configure attributes for chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class': 'mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n    'tabindex': '-1',\n    'aria-hidden': 'true',\n  }\n})\nexport class MatChipTrailingIcon {\n  constructor(public _elementRef: ElementRef) {}\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Sets an attribute on the icon. */\n  setAttribute(name: string, value: string) {\n    this._elementRef.nativeElement.setAttribute(name, value);\n  }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipRemove.\n * @docs-private\n */\nclass MatChipRemoveBase extends MatChipTrailingIcon {\n  constructor(_elementRef: ElementRef) {\n    super(_elementRef);\n  }\n}\n\nconst _MatChipRemoveMixinBase:\n  CanDisableCtor &\n  HasTabIndexCtor &\n  typeof MatChipRemoveBase =\n    mixinTabIndex(mixinDisabled(MatChipRemoveBase));\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n */\n@Directive({\n  selector: '[matChipRemove]',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class':\n      'mat-mdc-chip-remove mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n    '[tabIndex]': 'tabIndex',\n    'role': 'button',\n    '(click)': 'interaction.next($event)',\n    '(keydown)': 'interaction.next($event)',\n  }\n})\nexport class MatChipRemove extends _MatChipRemoveMixinBase implements CanDisable, HasTabIndex {\n  /**\n   * Emits when the user interacts with the icon.\n   * @docs-private\n   */\n  interaction: Subject<MouseEvent | KeyboardEvent> = new Subject<MouseEvent | KeyboardEvent>();\n\n  constructor(_elementRef: ElementRef) {\n    super(_elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {MDCChipAdapter, MDCChipFoundation} from '@material/chips';\nimport {numbers} from '@material/ripple';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatChipAvatar, MatChipTrailingIcon, MatChipRemove} from './chip-icons';\n\n\nlet uid = 0;\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/**\n * Directive to add MDC CSS to non-basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-chip, mat-chip-option, mat-chip-row, [mat-chip], [mat-chip-option],\n    [mat-chip-row]`,\n  host: {'class': 'mat-mdc-chip mdc-chip'}\n})\nexport class MatChipCssInternalOnly { }\n\n/**\n * Boilerplate for applying mixins to MatChip.\n * @docs-private\n */\nclass MatChipBase {\n  disabled!: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase:\n  CanColorCtor &\n  CanDisableRippleCtor &\n  HasTabIndexCtor &\n  typeof MatChipBase =\n    mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-basic-chip, mat-chip',\n  inputs: ['color', 'disableRipple'],\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrls: ['chips.css'],\n  host: {\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip()',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip()',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)'\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChip extends _MatChipMixinBase implements AfterContentInit, AfterViewInit,\n  CanColor, CanDisableRipple, HasTabIndex, RippleTarget, OnDestroy {\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  readonly HANDLED_KEYS: number[] = [];\n\n  /** Whether the chip has focus. */\n  protected _hasFocusInternal = false;\n\n    /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  get _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** Default unique id for the chip. */\n  private _uniqueId = `mat-mdc-chip-${uid++}`;\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this.removeIcon) {\n      this.removeIcon.disabled = value;\n    }\n  }\n  protected _disabled: boolean = false;\n\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input()\n  get highlighted(): boolean { return this._highlighted; }\n  set highlighted(value: boolean) {\n    this._highlighted = coerceBooleanProperty(value);\n  }\n  protected _highlighted: boolean = false;\n\n  /** Emitted when the user interacts with the remove icon. */\n  @Output() removeIconInteraction = new EventEmitter<string>();\n\n  /** Emitted when the user interacts with the chip. */\n  @Output() interaction = new EventEmitter<string>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The MDC foundation containing business logic for MDC chip. */\n  _chipFoundation: MDCChipFoundation;\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The ripple renderer for this chip. */\n  private _rippleRenderer: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * Implemented as part of RippleTarget.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Implemented as part of RippleTarget. Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled ||\n      this._isBasicChip();\n  }\n\n  /** The chip's leading icon. */\n  @ContentChild(MatChipAvatar, {static: false}) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MatChipRemove, {static: false}) removeIcon: MatChipRemove;\n\n /**\n  * Implementation of the MDC chip adapter interface.\n  * These methods are called by the chip foundation.\n  */\n  protected _chipAdapter: MDCChipAdapter = {\n    addClass: (className) => this._setMdcClass(className, true),\n    removeClass: (className) => this._setMdcClass(className, false),\n    hasClass: (className) => this._elementRef.nativeElement.classList.contains(className),\n    addClassToLeadingIcon: (className) => this.leadingIcon.setClass(className, true),\n    removeClassFromLeadingIcon: (className) => this.leadingIcon.setClass(className, false),\n    eventTargetHasClass: (target: EventTarget | null, className: string) => {\n      return target ? (target as Element).classList.contains(className) : false;\n    },\n    notifyInteraction: () => this.interaction.emit(this.id),\n    notifySelection: () => {\n      // No-op. We call dispatchSelectionEvent ourselves in MatChipOption, because we want to\n      // specify whether selection occurred via user input.\n    },\n    notifyNavigation: () => {\n      // TODO: This is a new feature added by MDC; consider exposing this event to users in the\n      // future.\n    },\n    notifyTrailingIconInteraction: () => this.removeIconInteraction.emit(this.id),\n    notifyRemoval: () => this.removed.emit({chip: this}),\n    getComputedStyleValue: propertyName =>\n        window.getComputedStyle(this._elementRef.nativeElement).getPropertyValue(propertyName),\n    setStyleProperty: (propertyName: string, value: string) => {\n      this._elementRef.nativeElement.style.setProperty(propertyName, value);\n    },\n    hasLeadingIcon: () => !!this.leadingIcon,\n    hasTrailingAction: () => !!this.trailingIcon,\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    focusPrimaryAction: () => {\n      // Angular Material MDC chips fully manage focus. TODO: Managing focus and handling keyboard\n      // events was added by MDC after our implementation; consider consolidating.\n    },\n    focusTrailingAction: () => {},\n    setTrailingActionAttr: (attr, value) =>\n        this.trailingIcon && this.trailingIcon.setAttribute(attr, value),\n    setPrimaryActionAttr: (name: string, value: string) => {\n      // MDC is currently using this method to set aria-checked on choice and filter chips,\n      // which in the MDC templates have role=\"checkbox\" and role=\"radio\" respectively.\n      // We have role=\"option\" on those chips instead, so we do not want aria-checked.\n      // Since we also manage the tabindex ourselves, we don't allow MDC to set it.\n      if (name === 'aria-checked' || name === 'tabindex') {\n        return;\n      }\n      this._elementRef.nativeElement.setAttribute(name, value);\n    },\n    // The 2 functions below are used by the MDC ripple, which we aren't using,\n    // so they will never be called\n    getRootBoundingClientRect: () => this._elementRef.nativeElement.getBoundingClientRect(),\n    getCheckmarkBoundingClientRect: () => null,\n };\n\n constructor(\n    public _changeDetectorRef: ChangeDetectorRef,\n    readonly _elementRef: ElementRef,\n    private _platform: Platform,\n    protected _ngZone: NgZone,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    private _globalRippleOptions: RippleGlobalOptions | null,\n    @Optional() private _dir: Directionality,\n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n    this._chipFoundation = new MDCChipFoundation(this._chipAdapter);\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  ngAfterContentInit() {\n    this._initRemoveIcon();\n  }\n\n  ngAfterViewInit() {\n    this._initRipple();\n    this._chipFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._rippleRenderer._removeTriggerEvents();\n    this._chipFoundation.destroy();\n  }\n\n  /** Sets up the remove icon chip foundation, and subscribes to remove icon events. */\n  _initRemoveIcon() {\n    if (this.removeIcon) {\n      this._chipFoundation.setShouldRemoveOnTrailingIconClick(true);\n      this._listenToRemoveIconInteraction();\n      this.removeIcon.disabled = this.disabled;\n    }\n  }\n\n  /** Handles interaction with the remove icon. */\n  _listenToRemoveIconInteraction() {\n    this.removeIcon.interaction\n        .pipe(takeUntil(this._destroyed))\n        .subscribe((event) => {\n          // The MDC chip foundation calls stopPropagation() for any trailing icon interaction\n          // event, even ones it doesn't handle, so we want to avoid passing it keyboard events\n          // for which we have a custom handler.\n          if (this.disabled || (event instanceof KeyboardEvent &&\n            this.HANDLED_KEYS.indexOf(event.keyCode) !== -1)) {\n            return;\n          }\n          this._chipFoundation.handleTrailingIconInteraction(event);\n        });\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this._chipFoundation.beginExit();\n    }\n  }\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  _isBasicChip() {\n    const element = this._elementRef.nativeElement as HTMLElement;\n    return element.hasAttribute(this.basicChipAttrName) ||\n      element.tagName.toLowerCase() === this.basicChipAttrName;\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  private _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Initializes the ripple renderer. */\n  private _initRipple() {\n    this.rippleConfig = this._globalRippleOptions || {};\n\n    // Configure ripple animation to match MDC Ripple.\n    this.rippleConfig.animation = {\n      enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n      exitDuration: numbers.FG_DEACTIVATION_MS,\n    };\n\n    this._rippleRenderer =\n      new RippleRenderer(this, this._ngZone, this._elementRef, this._platform);\n    this._rippleRenderer.setupTriggerEvents(this._elementRef);\n  }\n\n  /** Forwards interaction events to the MDC chip foundation. */\n  _handleInteraction(event: MouseEvent | KeyboardEvent) {\n    if (!this.disabled) {\n      this._chipFoundation.handleInteraction(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {MatChip} from './chip';\n\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n/**\n * An extension of the MatChip component that supports chip selection.\n * Used with MatChipListbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-basic-chip-option, mat-chip-option',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'option',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[id]': 'id',\n    '[tabIndex]': 'tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_click($event)',\n    '(keydown)': '_keydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipOption}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip {\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._chipFoundation.isSelected();\n  }\n  set selected(value: boolean) {\n    if (!this.selectable) {\n      return;\n    }\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue != this._chipFoundation.isSelected()) {\n      this._chipFoundation.setSelected(coerceBooleanProperty(value));\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (!this.selectable) {\n      return;\n    } else if (this.selected) {\n      this._chipFoundation.setSelected(false);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    if (!this.selectable) {\n      return this.selected;\n    }\n\n    this._chipFoundation.setSelected(!this.selected);\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Emits a selection change event. */\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this.selected\n    });\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocusInternal = true;\n  }\n\n  /** Resets the state of the chip when it loses focus. */\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocusInternal = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n\n  /** Handles click events on the chip. */\n  _click(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      this._handleInteraction(event);\n      event.stopPropagation();\n    }\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n        this.toggleSelected(true);\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\n\n\n/** The keys handled by the GridKeyManager keydown method. */\nexport const NAVIGATION_KEYS = [DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW];\n\n/** This interface is for rows that can be passed to a GridKeyManager. */\nexport interface GridKeyManagerRow<T> {\n  cells: T[];\n}\n\n/**\n * This class manages keyboard events for grids. If you pass it a query list\n * of GridKeyManagerRow, it will set the active cell correctly when arrow events occur.\n *\n * GridKeyManager expects that rows may change dynamically, but the cells for a given row are\n * static. It also expects that all rows have the same number of cells.\n */\nexport class GridKeyManager<T> {\n  private _activeRowIndex = -1;\n  private _activeColumnIndex = -1;\n  private _activeRow: GridKeyManagerRow<T> | null = null;\n  private _activeCell: T | null = null;\n  private _dir: 'ltr' | 'rtl' = 'ltr';\n\n  constructor(private _rows: QueryList<GridKeyManagerRow<T>> | GridKeyManagerRow<T>[]) {\n    // We allow for the rows to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the rows they want to manage (e.g. when the\n    // rows aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_rows instanceof QueryList) {\n      _rows.changes.subscribe((newRows: QueryList<GridKeyManagerRow<T>>) => {\n        if (this._activeRow) {\n          const newIndex = newRows.toArray().indexOf(this._activeRow);\n\n          if (newIndex > -1 && newIndex !== this._activeRowIndex) {\n            this._activeRowIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /** Stream that emits whenever the active cell of the grid manager changes. */\n  change = new Subject<{row: number, column: number}>();\n\n  /**\n   * Configures the directionality of the key manager's horizontal movement.\n   * @param direction Direction which is considered forward movement across a row.\n   *\n   * If withDirectionality is not set, the default is 'ltr'.\n   */\n  withDirectionality(direction: 'ltr' | 'rtl'): this {\n    this._dir = direction;\n    return this;\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified.\n   * @param cell The row and column containing the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell.\n   * @param cell The cell to be set as active.\n   */\n  setActiveCell(cell: T): void;\n\n  setActiveCell(cell: any): void {\n    const previousRowIndex = this._activeRowIndex;\n    const previousColumnIndex = this._activeColumnIndex;\n\n    this.updateActiveCell(cell);\n\n    if (this._activeRowIndex !== previousRowIndex ||\n      this._activeColumnIndex !== previousColumnIndex) {\n      this.change.next({row: this._activeRowIndex, column: this._activeColumnIndex});\n    }\n  }\n\n  /**\n   * Sets the active cell depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case DOWN_ARROW:\n        this.setNextRowActive();\n        break;\n\n      case UP_ARROW:\n        this.setPreviousRowActive();\n        break;\n\n      case RIGHT_ARROW:\n        this._dir === 'rtl' ? this.setPreviousColumnActive() : this.setNextColumnActive();\n        break;\n\n      case LEFT_ARROW:\n        this._dir === 'rtl' ? this.setNextColumnActive() : this.setPreviousColumnActive();\n        break;\n\n      default:\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    event.preventDefault();\n  }\n\n  /** Index of the currently active row. */\n  get activeRowIndex(): number {\n    return this._activeRowIndex;\n  }\n\n  /** Index of the currently active column. */\n  get activeColumnIndex(): number {\n    return this._activeColumnIndex;\n  }\n\n  /** The active cell. */\n  get activeCell(): T | null {\n    return this._activeCell;\n  }\n\n  /** Sets the active cell to the first cell in the grid. */\n  setFirstCellActive(): void {\n    this._setActiveCellByIndex(0, 0);\n  }\n\n  /** Sets the active cell to the last cell in the grid. */\n  setLastCellActive(): void {\n    const lastRowIndex = this._rows.length - 1;\n    const lastRow = this._getRowsArray()[lastRowIndex];\n    this._setActiveCellByIndex(lastRowIndex, lastRow.cells.length - 1);\n  }\n\n  /** Sets the active row to the next row in the grid. Active column is unchanged. */\n  setNextRowActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(1, 0);\n  }\n\n  /** Sets the active row to the previous row in the grid. Active column is unchanged. */\n  setPreviousRowActive(): void {\n    this._setActiveCellByDelta(-1, 0);\n  }\n\n  /**\n   * Sets the active column to the next column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setNextColumnActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(0, 1);\n  }\n\n  /**\n   * Sets the active column to the previous column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setPreviousColumnActive(): void {\n    this._setActiveCellByDelta(0, -1);\n  }\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Row and column of the cell to be set as active.\n   */\n  updateActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Cell to be set as active.\n   */\n  updateActiveCell(cell: T): void;\n\n  updateActiveCell(cell: any): void {\n    const rowArray = this._getRowsArray();\n\n    if (typeof cell === 'object' && typeof cell.row === 'number' &&\n      typeof cell.column === 'number') {\n      this._activeRowIndex = cell.row;\n      this._activeColumnIndex = cell.column;\n      this._activeRow = rowArray[cell.row] || null;\n      this._activeCell = this._activeRow ? this._activeRow.cells[cell.column] || null : null;\n    } else {\n      rowArray.forEach((row, rowIndex) => {\n        const columnIndex = row.cells.indexOf(cell);\n        if (columnIndex !== -1) {\n          this._activeRowIndex = rowIndex;\n          this._activeColumnIndex = columnIndex;\n          this._activeRow = row;\n          this._activeCell = row.cells[columnIndex];\n        }\n      });\n    }\n  }\n\n  /**\n   * This method sets the active cell, given the row and columns deltas\n   * between the currently active cell and the new active cell.\n   */\n  private _setActiveCellByDelta(rowDelta: -1 | 0 | 1, columnDelta: -1 | 0 | 1): void {\n    // If delta puts us past the last cell in a row, move to the first cell of the next row.\n    if (this._activeRow && this._activeColumnIndex + columnDelta >= this._activeRow.cells.length) {\n      this._setActiveCellByIndex(this._activeRowIndex + 1, 0);\n\n    // If delta puts us prior to the first cell in a row, move to the last cell of the previous row.\n    } else if (this._activeColumnIndex + columnDelta < 0) {\n      const previousRowIndex = this._activeRowIndex - 1;\n      const previousRow = this._getRowsArray()[previousRowIndex];\n      if (previousRow) {\n        this._setActiveCellByIndex(previousRowIndex, previousRow.cells.length - 1);\n      }\n    } else {\n      this._setActiveCellByIndex(this._activeRowIndex + rowDelta,\n        this._activeColumnIndex + columnDelta);\n    }\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified, if they are valid.\n   */\n  private _setActiveCellByIndex(rowIndex: number, columnIndex: number): void {\n    const rows = this._getRowsArray();\n\n    const targetRow = rows[rowIndex];\n\n    if (!targetRow || !targetRow.cells[columnIndex]) {\n      return;\n    }\n\n    this.setActiveCell({row: rowIndex, column: columnIndex});\n  }\n\n  /** Returns the rows as an array. */\n  private _getRowsArray(): GridKeyManagerRow<T>[] {\n    return this._rows instanceof QueryList ? this._rows.toArray() : this._rows;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatChip} from './chip';\nimport {GridKeyManagerRow, NAVIGATION_KEYS} from './grid-key-manager';\n\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-row, mat-basic-chip-row',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'row',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[tabIndex]': 'tabIndex',\n    '(mousedown)': '_mousedown($event)',\n    '(keydown)': '_keydown($event)',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)',\n    '(focusin)': '_focusin()',\n    '(focusout)': '_focusout()'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipRow}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterContentInit, AfterViewInit,\n  GridKeyManagerRow<HTMLElement> {\n  protected basicChipAttrName = 'mat-basic-chip-row';\n\n  /**\n   * The focusable wrapper element in the first gridcell, which contains all\n   * chip content other than the remove icon.\n   */\n  @ViewChild('chipContent', {static: false}) chipContent: ElementRef;\n\n  /** The focusable grid cells for this row. Implemented as part of GridKeyManagerRow. */\n  cells!: HTMLElement[];\n\n  /** Key codes for which this component has a custom handler. */\n  HANDLED_KEYS = NAVIGATION_KEYS.concat([BACKSPACE, DELETE]);\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.removeIcon) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      setTimeout(() => {\n        // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n        // the GridFocusKeyManager for row chips.\n        this.removeIcon.tabIndex = -1;\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.cells = this.removeIcon ?\n      [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n      [this.chipContent.nativeElement];\n  }\n\n  /**\n   * Allows for programmatic focusing of the chip.\n   * Sends focus to the first grid cell. The row chip element itself\n   * is never focused.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocusInternal) {\n      this._onFocus.next({chip: this});\n    }\n\n    this.chipContent.nativeElement.focus();\n  }\n\n  /**\n   * Emits a blur event when one of the gridcells loses focus, unless focus moved\n   * to the other gridcell.\n   */\n  _focusout() {\n    this._hasFocusInternal = false;\n    // Wait to see if focus moves to the other gridcell\n    setTimeout(() => {\n      if (this._hasFocus) {\n        return;\n      }\n      this._onBlur.next({chip: this});\n    });\n  }\n\n  /** Records that the chip has focus when one of the gridcells is focused. */\n  _focusin() {\n    this._hasFocusInternal = true;\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _mousedown(event: MouseEvent) {\n    if (!this.disabled) {\n      this.focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // Remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n"],"names":["[attr.aria-describedby]","[attr.aria-disabled]","[attr.aria-invalid]","[class.mat-mdc-chip-list-disabled]","[class.mat-mdc-chip-list-invalid]","[class.mat-mdc-chip-list-required]","(focus)","(blur)","(keydown)","[id]","providers","provide","MatFormFieldControl","useExisting","MatChipGrid","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","Directionality","decorators","Optional","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","propDecorators","required","Input","value","change","Output","valueChange","_chips","ContentChildren","args","MatChipRow","MAT_CHIPS_DEFAULT_OPTIONS","InjectionToken","nextUniqueId","MatChipInput","_elementRef","_defaultOptions","this","focused","_addOnBlur","separatorKeyCodes","chipEnd","EventEmitter","placeholder","id","_disabled","_inputElement","Object","defineProperty","prototype","_chipGrid","registerInput","coerceBooleanProperty","disabled","ngOnChanges","stateChanges","next","_keydown","event","keyCode","TAB","hasModifierKey","_allowFocusEscape","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","emit","input","preventDefault","_onInput","focus","separators","Array","isArray","indexOf","has","Directive","selector","exportAs","host","class","(input)","[attr.disabled]","[attr.placeholder]","ElementRef","undefined","Inject","chipGrid","CHIP_DECLARATIONS","MatChip","MatChipAvatar","MatChipCssInternalOnly","MatChipListbox","MatChipOption","MatChipRemove","MatChipSet","MatChipTrailingIcon","ɵ0","ENTER","MatChipsModule","NgModule","imports","MatCommonModule","CommonModule","exports","declarations","useValue","_this","toArray","findIndex","chip","focusChipPrimaryActionAtIndex","focusChipTrailingActionAtIndex","removeFocusFromChipAtIndex","isRTL","_dir","getChipListCount","length","_uid","uid","_mdcClasses","_chipSetFoundation","MDCChipSetFoundation","_chipSetAdapter","tslib_1.__extends","_super","_syncChipsState","empty","_hasFocusedChip","merge","apply","map","removed","destroyed","interaction","ngAfterViewInit","init","ngAfterContentInit","changes","pipe","startWith","takeUntil","_destroyed","subscribe","Promise","resolve","then","_resetChips","ngOnDestroy","_dropSubscriptions","complete","destroy","some","_hasFocus","forEach","_changeDetectorRef","markForCheck","_setMdcClass","cssClass","active","classes","nativeElement","classList","add","remove","_hasMdcClass","className","contains","_subscribeToChipEvents","_listenToChipsRemove","_listenToChipsDestroyed","_listenToChipsInteraction","_chipRemoveSubscription","chipRemoveChanges","handleChipRemoval","_chipDestroyedSubscription","chipDestroyedChanges","chipIndex","_isValidIndex","_lastDestroyedChipIndex","_chipInteractionSubscription","chipInteractionChanges","handleChipInteraction","unsubscribe","index","_originatesFromChip","currentElement","parentElement","Component","template","styles","[attr.role]","MatChipListboxChange","source","MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","multi","call","_onTouched","_onChange","_multiple","ariaOrientation","_selectable","_compareWith","o1","o2","_required","selectChipAtIndex","selected","_setSelected","_updateMdcSelectionClasses","_syncListboxProperties","selectedChips","filter","multiple","fn","_initializeSelection","selectionChange","_onFocus","_onBlur","_value","writeValue","_initKeyManager","_updateFocusForDestroyedChips","firstSelectedChip","_getFirstSelectedChip","firstSelectedChipIndex","_keyManager","setActiveItem","setFirstItemActive","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","isUserInput","_clearSelection","currentValue","_selectValue","correspondingChip","toggleSelected","setTimeout","_propagateChanges","_markAsTouched","previousTabIndex","tabIndex","HOME","END","setLastItemActive","onKeydown","fallbackValue","valueToEmit","select","skip","deselect","find","selectViaInteraction","_chipListMultiple","chipListSelectable","selectable","FocusKeyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","dir","tabOut","_chipSelectionSubscription","_chipBlurSubscription","_chipFocusSubscription","_listenToChipsSelection","_listenToChipsFocus","_listenToChipsBlur","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipSelectionChanges","chipSelectionChange","handleChipSelection","newChipIndex","Math","min","inputs","[tabIndex]","[attr.aria-multiselectable]","[attr.aria-orientation]","compareWith","GridFocusKeyManager","setActiveCell","cell","activeCell","GridKeyManager","MatChipGridChange","MatChipGridBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipGridMixinBase","mixinErrorState","controlType","valueAccessor","_chipInput","_placeholder","Error","ngDoCheck","updateErrorState","inputElement","onContainerClick","setFirstCellActive","_focusInput","setDescribedByIds","ids","_ariaDescribedby","join","row","column","target","BACKSPACE","_isEmptyInput","setLastCellActive","withDirectionality","updateActiveCell","activeColumnIndex","element","__extends","d","b","__","constructor","extendStatics","create","setPrototypeOf","__proto__","p","hasOwnProperty","setClass","toggle","role","ChangeDetectorRef","setAttribute","name","tabindex","aria-hidden","MatChipRemoveBase","_MatChipRemoveMixinBase","mixinTabIndex","mixinDisabled","Subject","(click)","MatChipBase","_MatChipMixinBase","mixinColor","mixinDisableRipple","_platform","_ngZone","_globalRippleOptions","animationMode","HANDLED_KEYS","_hasFocusInternal","_uniqueId","_removable","_highlighted","removeIconInteraction","basicChipAttrName","_chipAdapter","addClass","removeClass","hasClass","addClassToLeadingIcon","leadingIcon","removeClassFromLeadingIcon","eventTargetHasClass","notifyInteraction","notifySelection","notifyNavigation","notifyTrailingIconInteraction","notifyRemoval","getComputedStyleValue","propertyName","window","getComputedStyle","getPropertyValue","setStyleProperty","style","setProperty","hasLeadingIcon","hasTrailingAction","trailingIcon","focusPrimaryAction","focusTrailingAction","setTrailingActionAttr","attr","setPrimaryActionAttr","getRootBoundingClientRect","getBoundingClientRect","getCheckmarkBoundingClientRect","_chipFoundation","MDCChipFoundation","_animationsDisabled","removeIcon","textContent","disableRipple","rippleConfig","_isBasicChip","_initRemoveIcon","_initRipple","_rippleRenderer","_removeTriggerEvents","setShouldRemoveOnTrailingIconClick","_listenToRemoveIconInteraction","KeyboardEvent","handleTrailingIconInteraction","removable","beginExit","hasAttribute","tagName","toLowerCase","animation","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","RippleRenderer","setupTriggerEvents","_handleInteraction","handleInteraction","[class.mat-mdc-chip-disabled]","[class.mat-mdc-chip-highlighted]","[class.mat-mdc-chip-with-avatar]","[class.mat-mdc-chip-with-trailing-icon]","[class.mat-mdc-basic-chip]","[class.mat-mdc-standard-chip]","[class._mat-animation-noopable]","(transitionend)","Platform","NgZone","MAT_RIPPLE_GLOBAL_OPTIONS","String","ANIMATION_MODULE_TYPE","highlighted","ContentChild","static","MatChipSelectionChange","arguments","isSelected","setSelected","_dispatchSelectionChange","toString","onStable","asObservable","take","run","_click","stopPropagation","SPACE","[class.mat-mdc-chip-selected]","[attr.aria-selected]","NAVIGATION_KEYS","DOWN_ARROW","UP_ARROW","RIGHT_ARROW","LEFT_ARROW","_rows","_activeRowIndex","_activeColumnIndex","_activeRow","_activeCell","QueryList","newRows","newIndex","direction","previousRowIndex","previousColumnIndex","setNextRowActive","setPreviousRowActive","setPreviousColumnActive","setNextColumnActive","_setActiveCellByIndex","lastRowIndex","lastRow","_getRowsArray","cells","_setActiveCellByDelta","rowArray","rowIndex","columnIndex","rowDelta","columnDelta","previousRow","rows","targetRow","concat","DELETE","chipContent","_focusout","_focusin","_mousedown","(mousedown)","(focusin)","(focusout)","MatChipSetBase","_MatChipSetMixinBase","removeChipAtIndex","getIndexOfChipById"],"mappings":"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"}