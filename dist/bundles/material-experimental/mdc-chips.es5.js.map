{"version":3,"file":"mdc-chips.es5.js","sources":["../../../src/material-experimental/mdc-chips/module.ts","../../../src/material-experimental/mdc-chips/chip-input.ts","../../../src/material-experimental/mdc-chips/chip-default-options.ts","../../../src/material-experimental/mdc-chips/chip-grid.ts","../../../src/material-experimental/mdc-chips/grid-focus-key-manager.ts","../../../src/material-experimental/mdc-chips/chip-listbox.ts","../../../src/material-experimental/mdc-chips/chip-set.ts","../../../src/material-experimental/mdc-chips/chip-row.ts","../../../src/material-experimental/mdc-chips/grid-key-manager.ts","../../../src/material-experimental/mdc-chips/chip-option.ts","../../../src/material-experimental/mdc-chips/chip.ts","../../../src/material-experimental/mdc-chips/chip-icons.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher, MatCommonModule} from '@angular/material/core';\nimport {MatChip, MatChipCssInternalOnly} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipCssInternalOnly,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-mdc-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipGrid: MatChipGrid;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipGrid && this._chipGrid.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipGrid._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipGrid._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {MatChipTextControl} from './chip-text-control';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {GridFocusKeyManager} from './grid-focus-key-manager';\n\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              _dir: Directionality,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir);\n  }\n}\nconst _MatChipGridMixinBase: CanUpdateErrorStateCtor & typeof MatChipGridBase =\n    mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-grid',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid extends _MatChipGridMixinBase implements AfterContentInit, AfterViewInit,\n  CanUpdateErrorState, ControlValueAccessor, DoCheck, MatFormFieldControl<any>, OnDestroy {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The GridFocusKeyManager which handles focus. */\n  _keyManager: GridFocusKeyManager;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string { return this._chipInput.id; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean { return this._chipInput.empty && this._chips.length === 0; }\n\n    /** The ARIA role applied to the chip grid. */\n  get role(): string | null { return this.empty ? null : 'grid'; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  get focused(): boolean { return this._chipInput.focused || this._hasFocusedChip(); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n      new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipRow>;\n\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm,\n        _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (!this._chipInput) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._setMdcClass('mdc-chip-set--input', true);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event) && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (this._chips.length > 0) {\n      this._keyManager.setFirstCellActive();\n    } else {\n      this._focusInput();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    // Check whether the focus moved to chip input.\n    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n    // to chip input, do nothing.\n    // Timeout is needed to wait for the focus() event trigger on chip input.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._keyManager.setActiveCell({row: -1, column: -1});\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._chipInput.focused) {\n      return;\n    }\n\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isEmptyInput(target)) {\n      if (this._chips.length) {\n        this._keyManager.setLastCellActive();\n      }\n      event.preventDefault();\n    } else if (event.keyCode === TAB && target.id !== this._chipInput!.id ) {\n      this._allowFocusEscape();\n    } else if (this._originatesFromChip(event)) {\n      this._keyManager.onKeydown(event);\n    }\n    this.stateChanges.next();\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new GridFocusKeyManager(this._chips)\n      .withDirectionality(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withDirectionality(dir));\n    }\n  }\n\n   /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipRow);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveCell({row: chipIndex, column: 0});\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(\n      chip => chip.value) : fallbackValue;\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * If the amount of chips changed, we need to focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveCell({\n          row: newChipIndex,\n          column: this._keyManager.activeColumnIndex\n        });\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /** Focus input element. */\n  private _focusInput() {\n    this._chipInput.focus();\n  }\n\n  /** Returns true if element is an input with no value. */\n  private _isEmptyInput(element: HTMLElement): boolean {\n    if (element && element.id === this._chipInput!.id) {\n      return this._chipInput.empty;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GridKeyManager} from './grid-key-manager';\n\n/**\n * A version of GridKeyManager where the cells are HTMLElements, and focus()\n * is called on a cell when it becomes active.\n */\nexport class GridFocusKeyManager extends GridKeyManager<HTMLElement> {\n  /**\n   * Sets the active cell to the cell at the specified\n   * indices and focuses the newly active cell.\n   * @param cell Row and column indices of the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell that is specified and focuses it.\n   * @param cell Cell to be set as active.\n   */\n  setActiveCell(cell: HTMLElement): void;\n\n  setActiveCell(cell: any): void {\n    super.setActiveCell(cell);\n\n    if (this.activeCell) {\n      this.activeCell.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-listbox',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox extends MatChipSet implements AfterContentInit, ControlValueAccessor {\n\n  /** Subscription to selection changes in the chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The ARIA role applied to the chip listbox. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption  {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    this._initializeSelection();\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this._chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n      new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipOption>;\n\n  constructor(protected _elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality) {\n    super(_elementRef, _changeDetectorRef, _dir);\n    this._chipSetAdapter.selectChipAtIndex = (index: number, selected: boolean) => {\n      this._setSelected(index, selected);\n    };\n    // Reinitialize the foundation with our overridden adapter\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n    this._updateMdcSelectionClasses();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip) {\n      const firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n      this._keyManager.setActiveItem(firstSelectedChipIndex);\n    } else if (this._chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /** Selects or deselects a chip by id. */\n  _setSelected(index: number, selected: boolean) {\n    const chip = this._chips.toArray()[index];\n    if (chip && chip.selected != selected) {\n      chip.toggleSelected(true);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this.focused) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    // Wait to see if focus moves to an indivdual chip.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n   */\n  _keydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the chip listbox selection state to reflect any chips that were preselected.\n   */\n  private _initializeSelection() {\n    setTimeout(() => {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      this._chips.forEach(chip => {\n        if (chip.selected) {\n          this._chipSetFoundation.select(chip.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Sets the mdc classes for single vs multi selection. */\n  private _updateMdcSelectionClasses() {\n    this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n    this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatChip>(this._chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsSelection();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipOption);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n    });\n  }\n\n  /** Subscribes to selection changes in the option chips. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n      (chipSelectionChange: MatChipSelectionChange) => {\n        this._chipSetFoundation.handleChipSelection(\n          chipSelectionChange.source.id, chipSelectionChange.selected, false);\n        if (chipSelectionChange.isUserInput) {\n          this._propagateChanges();\n        }\n    });\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {HasTabIndex, HasTabIndexCtor, mixinTabIndex} from '@angular/material/core';\nimport {MDCChipSetAdapter, MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\n\n\nlet uid = 0;\n\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nclass MatChipSetBase {\n  disabled!: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase: HasTabIndexCtor & typeof MatChipSetBase =\n    mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-set',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-chip-set',\n    '[attr.role]': 'role',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[id]': '_uid',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet extends _MatChipSetMixinBase implements AfterContentInit, AfterViewInit,\n  HasTabIndex, OnDestroy {\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** Subscription to destroyed events in chips. */\n  private _chipDestroyedSubscription: Subscription | null;\n\n  /** Subscription to chip interactions. */\n  private _chipInteractionSubscription: Subscription | null;\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  protected _lastDestroyedChipIndex: number | null = null;\n\n  /** The MDC foundation containing business logic for MDC chip-set. */\n  protected _chipSetFoundation: MDCChipSetFoundation;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /**\n   * Implementation of the MDC chip-set adapter interface.\n   * These methods are called by the chip set foundation.\n   */\n  protected _chipSetAdapter: MDCChipSetAdapter = {\n    hasClass: (className) => this._hasMdcClass(className),\n    // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n    // removed.\n    removeChipAtIndex: () => {},\n    // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n    selectChipAtIndex: () => {},\n    getIndexOfChipById: (id: string) => this._chips.toArray().findIndex(chip => chip.id === id),\n    focusChipPrimaryActionAtIndex: () => {},\n    focusChipTrailingActionAtIndex: () => {},\n    removeFocusFromChipAtIndex: () => {},\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    getChipListCount: () => this._chips.length,\n  };\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Uid of the chip set */\n  _uid: string = `mat-mdc-chip-set-${uid++}`;\n\n  /**\n   * Map from class to whether the class is enabled.\n   * Enabled classes are set on the MDC chip-set div.\n   */\n  _mdcClasses: {[key: string]: boolean} = {};\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean { return this._chips.length === 0; }\n\n  /** The ARIA role applied to the chip set. */\n  get role(): string | null { return this.empty ? null : 'presentation'; }\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean { return this._hasFocusedChip(); }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.removed));\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.destroyed));\n  }\n\n  /** Combined stream of all of the child chips' interaction events. */\n  get chipInteractionChanges(): Observable<string> {\n    return merge(...this._chips.map(chip => chip.interaction));\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip) _chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              @Optional() protected _dir: Directionality) {\n    super(_elementRef);\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n  }\n\n  ngAfterViewInit() {\n    this._chipSetFoundation.init();\n  }\n\n  ngAfterContentInit() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipSetFoundation.destroy();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  protected _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Adapter method that returns true if the chip set has the given MDC class. */\n  protected _hasMdcClass(className: string) {\n    return this._elementRef.nativeElement.classList.contains(className);\n  }\n\n  /** Updates subscriptions to chip events. */\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._subscribeToChipEvents();\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    this._listenToChipsRemove();\n    this._listenToChipsDestroyed();\n    this._listenToChipsInteraction();\n  }\n\n  /** Subscribes to chip removal events. */\n  private _listenToChipsRemove() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event: MatChipEvent) => {\n       this._chipSetFoundation.handleChipRemoval(event.chip.id);\n    });\n  }\n\n  /** Subscribes to chip destroyed events. */\n  private _listenToChipsDestroyed() {\n    this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe((event: MatChipEvent) => {\n      const chip = event.chip;\n      const chipIndex: number = this._chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Subscribes to chip interaction events. */\n  private _listenToChipsInteraction() {\n    this._chipInteractionSubscription = this.chipInteractionChanges.subscribe((id: string) => {\n      this._chipSetFoundation.handleChipInteraction(id);\n    });\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n\n    if (this._chipInteractionSubscription) {\n      this._chipInteractionSubscription.unsubscribe();\n      this._chipInteractionSubscription = null;\n    }\n\n    if (this._chipDestroyedSubscription) {\n      this._chipDestroyedSubscription.unsubscribe();\n      this._chipDestroyedSubscription = null;\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mdc-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatChip} from './chip';\nimport {GridKeyManagerRow, NAVIGATION_KEYS} from './grid-key-manager';\n\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-row, mat-basic-chip-row',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'row',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[tabIndex]': 'tabIndex',\n    '(mousedown)': '_mousedown($event)',\n    '(keydown)': '_keydown($event)',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)',\n    '(focusin)': '_focusin()',\n    '(focusout)': '_focusout()'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipRow}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterContentInit, AfterViewInit,\n  GridKeyManagerRow<HTMLElement> {\n  protected basicChipAttrName = 'mat-basic-chip-row';\n\n  /**\n   * The focusable wrapper element in the first gridcell, which contains all\n   * chip content other than the remove icon.\n   */\n  @ViewChild('chipContent', {static: false}) chipContent: ElementRef;\n\n  /** The focusable grid cells for this row. Implemented as part of GridKeyManagerRow. */\n  cells!: HTMLElement[];\n\n  /** Key codes for which this component has a custom handler. */\n  HANDLED_KEYS = NAVIGATION_KEYS.concat([BACKSPACE, DELETE]);\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.removeIcon) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      setTimeout(() => {\n        // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n        // the GridFocusKeyManager for row chips.\n        this.removeIcon.tabIndex = -1;\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.cells = this.removeIcon ?\n      [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n      [this.chipContent.nativeElement];\n  }\n\n  /**\n   * Allows for programmatic focusing of the chip.\n   * Sends focus to the first grid cell. The row chip element itself\n   * is never focused.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocusInternal) {\n      this._onFocus.next({chip: this});\n    }\n\n    this.chipContent.nativeElement.focus();\n  }\n\n  /**\n   * Emits a blur event when one of the gridcells loses focus, unless focus moved\n   * to the other gridcell.\n   */\n  _focusout() {\n    this._hasFocusInternal = false;\n    // Wait to see if focus moves to the other gridcell\n    setTimeout(() => {\n      if (this._hasFocus) {\n        return;\n      }\n      this._onBlur.next({chip: this});\n    });\n  }\n\n  /** Records that the chip has focus when one of the gridcells is focused. */\n  _focusin() {\n    this._hasFocusInternal = true;\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _mousedown(event: MouseEvent) {\n    if (!this.disabled) {\n      this.focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // Remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\n\n\n/** The keys handled by the GridKeyManager keydown method. */\nexport const NAVIGATION_KEYS = [DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW];\n\n/** This interface is for rows that can be passed to a GridKeyManager. */\nexport interface GridKeyManagerRow<T> {\n  cells: T[];\n}\n\n/**\n * This class manages keyboard events for grids. If you pass it a query list\n * of GridKeyManagerRow, it will set the active cell correctly when arrow events occur.\n *\n * GridKeyManager expects that rows may change dynamically, but the cells for a given row are\n * static. It also expects that all rows have the same number of cells.\n */\nexport class GridKeyManager<T> {\n  private _activeRowIndex = -1;\n  private _activeColumnIndex = -1;\n  private _activeRow: GridKeyManagerRow<T> | null = null;\n  private _activeCell: T | null = null;\n  private _dir: 'ltr' | 'rtl' = 'ltr';\n\n  constructor(private _rows: QueryList<GridKeyManagerRow<T>> | GridKeyManagerRow<T>[]) {\n    // We allow for the rows to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the rows they want to manage (e.g. when the\n    // rows aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_rows instanceof QueryList) {\n      _rows.changes.subscribe((newRows: QueryList<GridKeyManagerRow<T>>) => {\n        if (this._activeRow) {\n          const newIndex = newRows.toArray().indexOf(this._activeRow);\n\n          if (newIndex > -1 && newIndex !== this._activeRowIndex) {\n            this._activeRowIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /** Stream that emits whenever the active cell of the grid manager changes. */\n  change = new Subject<{row: number, column: number}>();\n\n  /**\n   * Configures the directionality of the key manager's horizontal movement.\n   * @param direction Direction which is considered forward movement across a row.\n   *\n   * If withDirectionality is not set, the default is 'ltr'.\n   */\n  withDirectionality(direction: 'ltr' | 'rtl'): this {\n    this._dir = direction;\n    return this;\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified.\n   * @param cell The row and column containing the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell.\n   * @param cell The cell to be set as active.\n   */\n  setActiveCell(cell: T): void;\n\n  setActiveCell(cell: any): void {\n    const previousRowIndex = this._activeRowIndex;\n    const previousColumnIndex = this._activeColumnIndex;\n\n    this.updateActiveCell(cell);\n\n    if (this._activeRowIndex !== previousRowIndex ||\n      this._activeColumnIndex !== previousColumnIndex) {\n      this.change.next({row: this._activeRowIndex, column: this._activeColumnIndex});\n    }\n  }\n\n  /**\n   * Sets the active cell depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case DOWN_ARROW:\n        this.setNextRowActive();\n        break;\n\n      case UP_ARROW:\n        this.setPreviousRowActive();\n        break;\n\n      case RIGHT_ARROW:\n        this._dir === 'rtl' ? this.setPreviousColumnActive() : this.setNextColumnActive();\n        break;\n\n      case LEFT_ARROW:\n        this._dir === 'rtl' ? this.setNextColumnActive() : this.setPreviousColumnActive();\n        break;\n\n      default:\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    event.preventDefault();\n  }\n\n  /** Index of the currently active row. */\n  get activeRowIndex(): number {\n    return this._activeRowIndex;\n  }\n\n  /** Index of the currently active column. */\n  get activeColumnIndex(): number {\n    return this._activeColumnIndex;\n  }\n\n  /** The active cell. */\n  get activeCell(): T | null {\n    return this._activeCell;\n  }\n\n  /** Sets the active cell to the first cell in the grid. */\n  setFirstCellActive(): void {\n    this._setActiveCellByIndex(0, 0);\n  }\n\n  /** Sets the active cell to the last cell in the grid. */\n  setLastCellActive(): void {\n    const lastRowIndex = this._rows.length - 1;\n    const lastRow = this._getRowsArray()[lastRowIndex];\n    this._setActiveCellByIndex(lastRowIndex, lastRow.cells.length - 1);\n  }\n\n  /** Sets the active row to the next row in the grid. Active column is unchanged. */\n  setNextRowActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(1, 0);\n  }\n\n  /** Sets the active row to the previous row in the grid. Active column is unchanged. */\n  setPreviousRowActive(): void {\n    this._setActiveCellByDelta(-1, 0);\n  }\n\n  /**\n   * Sets the active column to the next column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setNextColumnActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(0, 1);\n  }\n\n  /**\n   * Sets the active column to the previous column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setPreviousColumnActive(): void {\n    this._setActiveCellByDelta(0, -1);\n  }\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Row and column of the cell to be set as active.\n   */\n  updateActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Cell to be set as active.\n   */\n  updateActiveCell(cell: T): void;\n\n  updateActiveCell(cell: any): void {\n    const rowArray = this._getRowsArray();\n\n    if (typeof cell === 'object' && typeof cell.row === 'number' &&\n      typeof cell.column === 'number') {\n      this._activeRowIndex = cell.row;\n      this._activeColumnIndex = cell.column;\n      this._activeRow = rowArray[cell.row] || null;\n      this._activeCell = this._activeRow ? this._activeRow.cells[cell.column] || null : null;\n    } else {\n      rowArray.forEach((row, rowIndex) => {\n        const columnIndex = row.cells.indexOf(cell);\n        if (columnIndex !== -1) {\n          this._activeRowIndex = rowIndex;\n          this._activeColumnIndex = columnIndex;\n          this._activeRow = row;\n          this._activeCell = row.cells[columnIndex];\n        }\n      });\n    }\n  }\n\n  /**\n   * This method sets the active cell, given the row and columns deltas\n   * between the currently active cell and the new active cell.\n   */\n  private _setActiveCellByDelta(rowDelta: -1 | 0 | 1, columnDelta: -1 | 0 | 1): void {\n    // If delta puts us past the last cell in a row, move to the first cell of the next row.\n    if (this._activeRow && this._activeColumnIndex + columnDelta >= this._activeRow.cells.length) {\n      this._setActiveCellByIndex(this._activeRowIndex + 1, 0);\n\n    // If delta puts us prior to the first cell in a row, move to the last cell of the previous row.\n    } else if (this._activeColumnIndex + columnDelta < 0) {\n      const previousRowIndex = this._activeRowIndex - 1;\n      const previousRow = this._getRowsArray()[previousRowIndex];\n      if (previousRow) {\n        this._setActiveCellByIndex(previousRowIndex, previousRow.cells.length - 1);\n      }\n    } else {\n      this._setActiveCellByIndex(this._activeRowIndex + rowDelta,\n        this._activeColumnIndex + columnDelta);\n    }\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified, if they are valid.\n   */\n  private _setActiveCellByIndex(rowIndex: number, columnIndex: number): void {\n    const rows = this._getRowsArray();\n\n    const targetRow = rows[rowIndex];\n\n    if (!targetRow || !targetRow.cells[columnIndex]) {\n      return;\n    }\n\n    this.setActiveCell({row: rowIndex, column: columnIndex});\n  }\n\n  /** Returns the rows as an array. */\n  private _getRowsArray(): GridKeyManagerRow<T>[] {\n    return this._rows instanceof QueryList ? this._rows.toArray() : this._rows;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {MatChip} from './chip';\n\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n/**\n * An extension of the MatChip component that supports chip selection.\n * Used with MatChipListbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-basic-chip-option, mat-chip-option',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'option',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[id]': 'id',\n    '[tabIndex]': 'tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_click($event)',\n    '(keydown)': '_keydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipOption}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip {\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._chipFoundation.isSelected();\n  }\n  set selected(value: boolean) {\n    if (!this.selectable) {\n      return;\n    }\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue != this._chipFoundation.isSelected()) {\n      this._chipFoundation.setSelected(coerceBooleanProperty(value));\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (!this.selectable) {\n      return;\n    } else if (this.selected) {\n      this._chipFoundation.setSelected(false);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    if (!this.selectable) {\n      return this.selected;\n    }\n\n    this._chipFoundation.setSelected(!this.selected);\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Emits a selection change event. */\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this.selected\n    });\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocusInternal = true;\n  }\n\n  /** Resets the state of the chip when it loses focus. */\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocusInternal = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n\n  /** Handles click events on the chip. */\n  _click(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      this._handleInteraction(event);\n      event.stopPropagation();\n    }\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n        this.toggleSelected(true);\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {MDCChipAdapter, MDCChipFoundation} from '@material/chips';\nimport {numbers} from '@material/ripple';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatChipAvatar, MatChipTrailingIcon, MatChipRemove} from './chip-icons';\n\n\nlet uid = 0;\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/**\n * Directive to add MDC CSS to non-basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-chip, mat-chip-option, mat-chip-row, [mat-chip], [mat-chip-option],\n    [mat-chip-row]`,\n  host: {'class': 'mat-mdc-chip mdc-chip'}\n})\nexport class MatChipCssInternalOnly { }\n\n/**\n * Boilerplate for applying mixins to MatChip.\n * @docs-private\n */\nclass MatChipBase {\n  disabled!: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase:\n  CanColorCtor &\n  CanDisableRippleCtor &\n  HasTabIndexCtor &\n  typeof MatChipBase =\n    mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-basic-chip, mat-chip',\n  inputs: ['color', 'disableRipple'],\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrls: ['chips.css'],\n  host: {\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip()',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip()',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(transitionend)': '_chipFoundation.handleTransitionEnd($event)'\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChip extends _MatChipMixinBase implements AfterContentInit, AfterViewInit,\n  CanColor, CanDisableRipple, HasTabIndex, RippleTarget, OnDestroy {\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  readonly HANDLED_KEYS: number[] = [];\n\n  /** Whether the chip has focus. */\n  protected _hasFocusInternal = false;\n\n    /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  get _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** Default unique id for the chip. */\n  private _uniqueId = `mat-mdc-chip-${uid++}`;\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this.removeIcon) {\n      this.removeIcon.disabled = value;\n    }\n  }\n  protected _disabled: boolean = false;\n\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input()\n  get highlighted(): boolean { return this._highlighted; }\n  set highlighted(value: boolean) {\n    this._highlighted = coerceBooleanProperty(value);\n  }\n  protected _highlighted: boolean = false;\n\n  /** Emitted when the user interacts with the remove icon. */\n  @Output() removeIconInteraction = new EventEmitter<string>();\n\n  /** Emitted when the user interacts with the chip. */\n  @Output() interaction = new EventEmitter<string>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The MDC foundation containing business logic for MDC chip. */\n  _chipFoundation: MDCChipFoundation;\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The ripple renderer for this chip. */\n  private _rippleRenderer: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * Implemented as part of RippleTarget.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Implemented as part of RippleTarget. Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled ||\n      this._isBasicChip();\n  }\n\n  /** The chip's leading icon. */\n  @ContentChild(MatChipAvatar, {static: false}) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MatChipRemove, {static: false}) removeIcon: MatChipRemove;\n\n /**\n  * Implementation of the MDC chip adapter interface.\n  * These methods are called by the chip foundation.\n  */\n  protected _chipAdapter: MDCChipAdapter = {\n    addClass: (className) => this._setMdcClass(className, true),\n    removeClass: (className) => this._setMdcClass(className, false),\n    hasClass: (className) => this._elementRef.nativeElement.classList.contains(className),\n    addClassToLeadingIcon: (className) => this.leadingIcon.setClass(className, true),\n    removeClassFromLeadingIcon: (className) => this.leadingIcon.setClass(className, false),\n    eventTargetHasClass: (target: EventTarget | null, className: string) => {\n      return target ? (target as Element).classList.contains(className) : false;\n    },\n    notifyInteraction: () => this.interaction.emit(this.id),\n    notifySelection: () => {\n      // No-op. We call dispatchSelectionEvent ourselves in MatChipOption, because we want to\n      // specify whether selection occurred via user input.\n    },\n    notifyNavigation: () => {\n      // TODO: This is a new feature added by MDC; consider exposing this event to users in the\n      // future.\n    },\n    notifyTrailingIconInteraction: () => this.removeIconInteraction.emit(this.id),\n    notifyRemoval: () => this.removed.emit({chip: this}),\n    getComputedStyleValue: propertyName =>\n        window.getComputedStyle(this._elementRef.nativeElement).getPropertyValue(propertyName),\n    setStyleProperty: (propertyName: string, value: string) => {\n      this._elementRef.nativeElement.style.setProperty(propertyName, value);\n    },\n    hasLeadingIcon: () => !!this.leadingIcon,\n    hasTrailingAction: () => !!this.trailingIcon,\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    focusPrimaryAction: () => {\n      // Angular Material MDC chips fully manage focus. TODO: Managing focus and handling keyboard\n      // events was added by MDC after our implementation; consider consolidating.\n    },\n    focusTrailingAction: () => {},\n    setTrailingActionAttr: (attr, value) =>\n        this.trailingIcon && this.trailingIcon.setAttribute(attr, value),\n    setPrimaryActionAttr: (name: string, value: string) => {\n      // MDC is currently using this method to set aria-checked on choice and filter chips,\n      // which in the MDC templates have role=\"checkbox\" and role=\"radio\" respectively.\n      // We have role=\"option\" on those chips instead, so we do not want aria-checked.\n      // Since we also manage the tabindex ourselves, we don't allow MDC to set it.\n      if (name === 'aria-checked' || name === 'tabindex') {\n        return;\n      }\n      this._elementRef.nativeElement.setAttribute(name, value);\n    },\n    // The 2 functions below are used by the MDC ripple, which we aren't using,\n    // so they will never be called\n    getRootBoundingClientRect: () => this._elementRef.nativeElement.getBoundingClientRect(),\n    getCheckmarkBoundingClientRect: () => null,\n };\n\n constructor(\n    public _changeDetectorRef: ChangeDetectorRef,\n    readonly _elementRef: ElementRef,\n    private _platform: Platform,\n    protected _ngZone: NgZone,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    private _globalRippleOptions: RippleGlobalOptions | null,\n    @Optional() private _dir: Directionality,\n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n    this._chipFoundation = new MDCChipFoundation(this._chipAdapter);\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  ngAfterContentInit() {\n    this._initRemoveIcon();\n  }\n\n  ngAfterViewInit() {\n    this._initRipple();\n    this._chipFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._rippleRenderer._removeTriggerEvents();\n    this._chipFoundation.destroy();\n  }\n\n  /** Sets up the remove icon chip foundation, and subscribes to remove icon events. */\n  _initRemoveIcon() {\n    if (this.removeIcon) {\n      this._chipFoundation.setShouldRemoveOnTrailingIconClick(true);\n      this._listenToRemoveIconInteraction();\n      this.removeIcon.disabled = this.disabled;\n    }\n  }\n\n  /** Handles interaction with the remove icon. */\n  _listenToRemoveIconInteraction() {\n    this.removeIcon.interaction\n        .pipe(takeUntil(this._destroyed))\n        .subscribe((event) => {\n          // The MDC chip foundation calls stopPropagation() for any trailing icon interaction\n          // event, even ones it doesn't handle, so we want to avoid passing it keyboard events\n          // for which we have a custom handler.\n          if (this.disabled || (event instanceof KeyboardEvent &&\n            this.HANDLED_KEYS.indexOf(event.keyCode) !== -1)) {\n            return;\n          }\n          this._chipFoundation.handleTrailingIconInteraction(event);\n        });\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this._chipFoundation.beginExit();\n    }\n  }\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  _isBasicChip() {\n    const element = this._elementRef.nativeElement as HTMLElement;\n    return element.hasAttribute(this.basicChipAttrName) ||\n      element.tagName.toLowerCase() === this.basicChipAttrName;\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  private _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Initializes the ripple renderer. */\n  private _initRipple() {\n    this.rippleConfig = this._globalRippleOptions || {};\n\n    // Configure ripple animation to match MDC Ripple.\n    this.rippleConfig.animation = {\n      enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n      exitDuration: numbers.FG_DEACTIVATION_MS,\n    };\n\n    this._rippleRenderer =\n      new RippleRenderer(this, this._ngZone, this._elementRef, this._platform);\n    this._rippleRenderer.setupTriggerEvents(this._elementRef);\n  }\n\n  /** Forwards interaction events to the MDC chip foundation. */\n  _handleInteraction(event: MouseEvent | KeyboardEvent) {\n    if (!this.disabled) {\n      this._chipFoundation.handleInteraction(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * Directive to add CSS classes to chip leading icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-chip__icon mdc-chip__icon--leading',\n    'role': 'img'\n  }\n})\nexport class MatChipAvatar {\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Sets whether the given CSS class should be applied to the leading icon. */\n  setClass(cssClass: string, active: boolean) {\n    this._elementRef.nativeElement.classList.toggle(cssClass, active);\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Directive to add CSS classes to and configure attributes for chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class': 'mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n    'tabindex': '-1',\n    'aria-hidden': 'true',\n  }\n})\nexport class MatChipTrailingIcon {\n  constructor(public _elementRef: ElementRef) {}\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Sets an attribute on the icon. */\n  setAttribute(name: string, value: string) {\n    this._elementRef.nativeElement.setAttribute(name, value);\n  }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipRemove.\n * @docs-private\n */\nclass MatChipRemoveBase extends MatChipTrailingIcon {\n  constructor(_elementRef: ElementRef) {\n    super(_elementRef);\n  }\n}\n\nconst _MatChipRemoveMixinBase:\n  CanDisableCtor &\n  HasTabIndexCtor &\n  typeof MatChipRemoveBase =\n    mixinTabIndex(mixinDisabled(MatChipRemoveBase));\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n */\n@Directive({\n  selector: '[matChipRemove]',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class':\n      'mat-mdc-chip-remove mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n    '[tabIndex]': 'tabIndex',\n    'role': 'button',\n    '(click)': 'interaction.next($event)',\n    '(keydown)': 'interaction.next($event)',\n  }\n})\nexport class MatChipRemove extends _MatChipRemoveMixinBase implements CanDisable, HasTabIndex {\n  /**\n   * Emits when the user interacts with the icon.\n   * @docs-private\n   */\n  interaction: Subject<MouseEvent | KeyboardEvent> = new Subject<MouseEvent | KeyboardEvent>();\n\n  constructor(_elementRef: ElementRef) {\n    super(_elementRef);\n  }\n}\n"],"names":["tslib_1.__extends","uid"],"mappings":"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"}