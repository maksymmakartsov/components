{"version":3,"file":"mdc-button.es5.js","sources":["../../../src/material-experimental/mdc-button/module.ts","../../../src/material-experimental/mdc-button/icon-button.ts","../../../src/material-experimental/mdc-button/fab.ts","../../../src/material-experimental/mdc-button/button.ts","../../../src/material-experimental/mdc-button/button-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n})\nexport class MatButtonModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase\n} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  // Set the ripple to be centered for icon buttons\n  _isRippleCentered = true;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {\n  // Set the ripple to be centered for icon buttons\n  _isRippleCentered = true;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {MatAnchor} from './button';\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatButtonBase\n} from './button-base';\nimport {ThemePalette} from '@angular/material/core';\n\n/**\n * Material Design floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabButton` class has two appearances: normal and mini.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-fab], button[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabButton extends MatButtonBase {\n  // The FAB by default has its color set to accent.\n  color = 'accent' as ThemePalette;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n\n/**\n * Material Design floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabAnchor` class has two appearances: normal and mini.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-fab], a[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabAnchor extends MatAnchor {\n  // The FAB by default has its color set to accent.\n  color = 'accent' as ThemePalette;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase\n} from './button-base';\n\n/**\n * Material Design button component. Users interact with a button to perform an action.\n * See https://material.io/components/buttons\n *\n * The `MatButton` class applies to native button elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  moduleId: module.id,\n  selector: `\n    button[mat-button], button[mat-raised-button], button[mat-flat-button],\n    button[mat-stroked-button]\n  `,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends MatButtonBase {\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design button component for anchor elements. Anchor elements are used to provide\n * links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons\n *\n * The `MatAnchor` class applies to native anchor elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: MAT_ANCHOR_HOST,\n  inputs: MAT_ANCHOR_INPUTS,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatAnchorBase {\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, NgZone, ViewChild} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleAnimationConfig\n} from '@angular/material/core';\nimport {numbers} from '@material/ripple';\n\n/** Inputs common to all buttons. */\nexport const MAT_BUTTON_INPUTS = ['disabled', 'disableRipple', 'color'];\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {selector: string, mdcClasses: string[]}[] = [\n  {\n    selector: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    selector: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    selector: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    selector: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    selector: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    selector: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    selector: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  }\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonMixinCore {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonBaseMixin: CanDisableRippleCtor&CanDisableCtor&CanColorCtor&\n    typeof MatButtonMixinCore = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonMixinCore)));\n\n/** Base class for all buttons.  */\nexport class MatButtonBase extends _MatButtonBaseMixin implements CanDisable, CanColor,\n                                                                  CanDisableRipple {\n  /** The ripple animation configuration to use for the buttons. */\n  _rippleAnimation: RippleAnimationConfig = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS\n  };\n\n  /** Whether the ripple is centered on the button. */\n  _isRippleCentered = false;\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(\n      elementRef: ElementRef, public _platform: Platform, public _ngZone: NgZone,\n      public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const pair of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (this._hasHostAttributes(pair.selector)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(...pair.mdcClasses);\n      }\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  private _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._elementRef.nativeElement.hasAttribute(attribute));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n}\n\n/** Shared inputs by buttons using the `<a>` tag */\nexport const MAT_ANCHOR_INPUTS = ['disabled', 'disableRipple', 'color', 'tabIndex'];\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  '(click)': '_haltDisabledEvents($event)',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n};\n\n/**\n * Anchor button base.\n */\nexport class MatAnchorBase extends MatButtonBase {\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone, animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}