{"version":3,"file":"mdc-checkbox.js","sources":["../../../src/material-experimental/mdc-checkbox/module.ts","../../../src/material-experimental/mdc-checkbox/checkbox.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {_MatCheckboxRequiredValidatorModule} from '@angular/material/checkbox';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, CommonModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from '@angular/material/checkbox';\nimport {ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCCheckboxAdapter, MDCCheckboxFoundation} from '@material/checkbox';\nimport {numbers} from '@material/ripple';\n\nlet nextUniqueId = 0;\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[id]': 'id',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  /**\n   * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** The `aria-labelledby` attribute to use for the input element. */\n  @Input('aria-labelledby') ariaLabelledby: string|null = null;\n\n  /** The color palette  for this checkbox ('primary', 'accent', or 'warn'). */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n  @Input() labelPosition: 'before'|'after' = 'after';\n\n  /** The `name` attribute to use for the input element. */\n  @Input() name: string|null = null;\n\n  /** The `tabindex` attribute to use for the input element. */\n  @Input() tabIndex: number;\n\n  /** The `value` attribute to use for the input element */\n  @Input() value: string;\n\n  private _uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(checked) {\n    this._checked = coerceBooleanProperty(checked);\n  }\n  private _checked = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(indeterminate) {\n    this._indeterminate = coerceBooleanProperty(indeterminate);\n  }\n  private _indeterminate = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(required) {\n    this._required = coerceBooleanProperty(required);\n  }\n  private _required = false;\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output()\n  readonly change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The root element for the `MDCCheckbox`. */\n  @ViewChild('checkbox', {static: false}) _checkbox: ElementRef<HTMLElement>;\n\n  /** The native input element. */\n  @ViewChild('nativeCheckbox', {static: false}) _nativeCheckbox: ElementRef<HTMLInputElement>;\n\n  /** The native label element. */\n  @ViewChild('label', {static: false}) _label: ElementRef<HTMLElement>;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** The `MDCCheckboxFoundation` instance for this checkbox. */\n  _checkboxFoundation: MDCCheckboxFoundation;\n\n  /** The set of classes that should be applied to the native input. */\n  _classes: {[key: string]: boolean} = {'mdc-checkbox__native-control': true};\n\n  /** Animation config for the ripple. */\n  _rippleAnimation = {\n    enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n    exitDuration: numbers.FG_DEACTIVATION_MS,\n  };\n\n  /** ControlValueAccessor onChange */\n  private _cvaOnChange = (_: boolean) => {};\n\n  /** ControlValueAccessor onTouch */\n  private _cvaOnTouch = () => {};\n\n  /**\n   * A list of attributes that should not be modified by `MDCFoundation` classes.\n   *\n   * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n   * Therefore we disable it and handle it ourselves.\n   */\n  private _attrBlacklist = new Set(['aria-checked']);\n\n  /** The `MDCCheckboxAdapter` instance for this checkbox. */\n  private _checkboxAdapter: MDCCheckboxAdapter = {\n    addClass: (className) => this._setClass(className, true),\n    removeClass: (className) => this._setClass(className, false),\n    forceLayout: () => this._platform.isBrowser && this._checkbox.nativeElement.offsetWidth,\n    hasNativeControl: () => !!this._nativeCheckbox,\n    isAttachedToDOM: () => !!this._checkbox.nativeElement.parentNode,\n    isChecked: () => this.checked,\n    isIndeterminate: () => this.indeterminate,\n    removeNativeControlAttr:\n        (attr) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.removeAttribute(attr);\n          }\n        },\n    setNativeControlAttr:\n        (attr, value) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n          }\n        },\n    setNativeControlDisabled: (disabled) => this.disabled = disabled,\n  };\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      private _platform: Platform,\n      @Attribute('tabindex') tabIndex: string,\n      @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION) private _clickAction: MatCheckboxClickAction,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._checkboxFoundation = new MDCCheckboxFoundation(this._checkboxAdapter);\n    // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n    // ripple, which we do ourselves instead.\n  }\n\n  ngAfterViewInit() {\n    this._checkboxFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this._checkboxFoundation.destroy();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnChange(fn: (checked: boolean) => void) {\n    this._cvaOnChange = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void) {\n    this._cvaOnTouch = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._nativeCheckbox.nativeElement.focus();\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle() {\n    this.checked = !this.checked;\n    this._cvaOnChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._cvaOnTouch();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Handles click events on the native input.\n   *\n   * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n   * not actually change the checked state when the user clicks an indeterminate checkbox. By\n   * listening to `click` instead we can override and normalize the behavior to change the checked\n   * state like other browsers do.\n   */\n  _onClick() {\n    if (this._clickAction === 'noop') {\n      this._nativeCheckbox.nativeElement.checked = this.checked;\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n      return;\n    }\n\n    if (this.indeterminate && this._clickAction !== 'check') {\n      this.indeterminate = false;\n      // tslint:disable:max-line-length\n      // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n      // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n      // tslint:enable:max-line-length\n      Promise.resolve().then(() => this.indeterminateChange.next(this.indeterminate));\n    } else {\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n    }\n\n    this.checked = !this.checked;\n    this._checkboxFoundation.handleChange();\n\n    // Dispatch our change event\n    const newEvent = new MatCheckboxChange();\n    newEvent.source = this as any;\n    newEvent.checked = this.checked;\n    this._cvaOnChange(this.checked);\n    this.change.next(newEvent);\n  }\n\n  /** Gets the value for the `aria-checked` attribute of the native input. */\n  _getAriaChecked(): 'true'|'false'|'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  /** Sets whether the given CSS class should be applied to the native input. */\n  private _setClass(cssClass: string, active: boolean) {\n    this._classes[cssClass] = active;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n"],"names":[],"mappings":"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"}